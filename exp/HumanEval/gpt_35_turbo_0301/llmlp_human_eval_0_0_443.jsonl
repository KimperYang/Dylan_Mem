{"task_id": "HumanEval/0", "completion": "    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    stack = []\n    res = []\n    temp_str = ''\n    for c in paren_string:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            stack.pop()\n        temp_str += c\n        if not stack:\n            res.append(temp_str.replace(' ', ''))\n            temp_str = ''\n    return res"}
{"task_id": "HumanEval/2", "completion": "    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number rounded to the nearest thousandth.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return round(number - int(number), 3)\n"}
{"task_id": "HumanEval/3", "completion": "    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n\n    MAD = average | x - x_mean |\n\n    :param numbers: A list of float values.\n    :return: Mean absolute deviation of the list.\n\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\n    # Calculate the mean of the list\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the mean absolute deviation of the list\n    mad = sum(abs(number - mean) for number in numbers) / len(numbers)\n\n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "    if len(numbers) < 2:\n        return numbers\n    else:\n        return [x for pair in zip(numbers, [delimeter] * (len(numbers) - 1)) for x in pair] + [numbers[-1]]"}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        curr_depth = 0\n        for char in group:\n            if char == '(':\n                curr_depth += 1\n                max_depth = max(max_depth, curr_depth)\n            elif char == ')':\n                curr_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    filtered_strings = [string for string in strings if substring in string]\n    return filtered_strings"}
{"task_id": "HumanEval/8", "completion": "    # Initialize sum and product variables\n    sum_nums = 0\n    product_nums = 1\n  \n    # Iterate through the numbers, updating sum and product accordingly\n    for num in numbers:\n        sum_nums += num\n        product_nums *= num\n  \n    # Return the tuple of sum and product\n    return (sum_nums, product_nums)"}
{"task_id": "HumanEval/9", "completion": "    max_list = []\n    max_num = float('-inf') # initialize the maximum number as negative infinity\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        max_list.append(max_num)\n    return max_list"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    prefix = \"\"\n    for index in range(len(string)):\n        suffix = string[index:]\n        if is_palindrome(suffix):\n            prefix = string[:index]\n            break\n    return string + prefix[::-1]"}
{"task_id": "HumanEval/11", "completion": "    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    \n    # Ensure that both strings have the same length\n    if len(a) != len(b):\n        return None\n    \n    # Create an empty string to store the result\n    result = ''\n    \n    # Iterate through each character of the strings and perform XOR\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    \n    return result\n"}
{"task_id": "HumanEval/12", "completion": "    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    :param strings: List of strings\n    :return: Longest string in the list. If there are multiple strings of the same length, return the first one. If the\n    input list is empty, return None.\n    \n    Examples:\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    # Iterative approach\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "\n    # Using list comprehension to create a list of numbers\n    num_list = [str(i) for i in range(n+1)]\n    # Joining the numbers in the list with a space delimiter\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/16", "completion": "\n    # convert string to lower case\n    string = string.lower()\n    # use set to get distinct characters\n    distinct_chars = set(string)\n    # return the length of the set\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    notes = music_string.split()\n    music = []\n    for note in notes:\n        if note == 'o':\n            music.append(4)\n        elif note == 'o|':\n            music.append(2)\n        elif note == '.|':\n            music.append(1)\n    return music"}
{"task_id": "HumanEval/18", "completion": "    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \n    Examples:\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    >>> sort_numbers('six five zero eight three two one nine four seven')\n    'zero one two three four five six seven eight nine'\n    \"\"\"\n    # create a dictionary to map number words to their numerical equivalent\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # split the input string into a list of number words\n    num_list = numbers.split()\n    \n    # convert each number word to its numerical equivalent, then sort the list\n    num_list = sorted([num_dict[num] for num in num_list])\n    \n    # convert the sorted numerical list back to a list of number words\n    sorted_nums = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in num_list]\n    \n    # return the sorted list as a space-delimited string\n    return ' '.join(sorted_nums)\n"}
{"task_id": "HumanEval/20", "completion": "    numbers.sort()   # sort the numbers in ascending order\n    min_diff = float('inf')   # initialize the minimum difference as infinity\n    closest_pair = ()   # initialize an empty tuple to hold the closest pair\n    for i in range(len(numbers)-1):   # iterate through the sorted list\n        if abs(numbers[i] - numbers[i+1]) < min_diff:   # if the difference between two adjacent numbers is less than the current minimum difference\n            min_diff = abs(numbers[i] - numbers[i+1])   # update the minimum difference\n            closest_pair = (numbers[i], numbers[i+1])   # update the closest pair\n    return closest_pair   # return the closest pair"}
{"task_id": "HumanEval/21", "completion": "    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n    Example:\n    rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) => [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # check if the given list is empty\n    if not numbers:\n        return []\n    \n    # find the minimum and maximum number in the list\n    min_num = min(numbers)\n    max_num = max(numbers)\n    \n    # calculate the range and check if it is zero\n    num_range = max_num - min_num\n    if num_range == 0:\n        # if range is zero, all the elements in the list are the same\n        # return a list of the same number of zeros\n        return [0] * len(numbers)\n    \n    # create a list to hold the transformed numbers\n    transformed_numbers = []\n    \n    # apply the linear transform\n    for num in numbers:\n        transformed_num = (num - min_num) / num_range\n        transformed_numbers.append(transformed_num)\n    \n    return transformed_numbers\n"}
{"task_id": "HumanEval/22", "completion": "    return list(filter(lambda x: type(x) == int, values))"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "\n    largest = 1\n    # check all numbers from 2 to n//2 (inclusive) to see if they divide n evenly\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            # if i divides n evenly, update largest\n            largest = i\n    return largest"}
{"task_id": "HumanEval/25", "completion": "    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    num = 2\n    while n > 1:\n        if n % num == 0:\n            factors.append(num)\n            n = n / num\n        else:\n            num += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "\n    # create empty string to hold flipped case characters\n    flipped = ''\n    # iterate through each character in the string\n    for char in string:\n        # if the character is lowercase, flip to uppercase and add to flipped string\n        if char.islower():\n            flipped += char.upper()\n        # if the character is uppercase, flip to lowercase and add to flipped string\n        elif char.isupper():\n            flipped += char.lower()\n        # if the character is neither, add to flipped string as is\n        else:\n            flipped += char\n    # return the flipped string\n    return flipped"}
{"task_id": "HumanEval/28", "completion": "    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    \"\"\"\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    n = len(xs)\n    if n % 2 != 0: # if odd number of coefficients\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    m = n // 2\n    if xs[m] == 0: # if largest non zero coefficient is zero\n        raise ValueError(\"largest non zero coefficient cannot be zero\")\n    if n == 2: # base case\n        return -xs[0] / xs[1]\n    # Divide the polynomial into two halves with equal number of coefficients\n    q, r = xs[:m], xs[m:]\n    # Get the roots of the two halves\n    x1, x2 = find_zero(q), find_zero(r)\n    # Combine the roots of the two halves\n    return (x1 * poly(r, x2)) / (poly(q, x2) + poly(r, x2))\n"}
{"task_id": "HumanEval/33", "completion": "    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three,\n    while its values at the indices that are divisible by three are equal to the\n    values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # get sublist of values divisible by three\n    l_divisible_by_3 = l[::3]\n    # sort sublist\n    l_divisible_by_3 = sorted(l_divisible_by_3)\n    \n    # create the output list with the same length as the input list\n    l_prime = [0] * len(l)\n    \n    # loop through the input list\n    for i in range(len(l)):\n        # if index is divisible by 3, assign the sorted value to the output list\n        if i % 3 == 0:\n            l_prime[i] = l_divisible_by_3.pop(0)\n        # if index is not divisible by 3, assign the original value to the output list\n        else:\n            l_prime[i] = l[i]\n    \n    return l_prime\n"}
{"task_id": "HumanEval/34", "completion": "    # use set to get unique elements then sort them using sorted function\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:\n        return None\n    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem"}
{"task_id": "HumanEval/36", "completion": "    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n"}
{"task_id": "HumanEval/37", "completion": "\n    even = sorted([i for i in l[::2]])\n    return [even.pop(0) if not i % 2 else l[i] for i in range(len(l))]"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse element in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[0:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def fibonacci(n):\n        if n in [0, 1]:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    \n    count = 0\n    num = 2\n    while count != n:\n        if is_prime(num) and is_fibonacci(num):\n            count += 1\n        num += 1\n    return num-1\n\ndef is_fibonacci(num):\n    if num == 0 or num == 1:\n        return True\n    a, b = 0, 1\n    while b < num:\n        a, b = b, a+b\n    return b == num"}
{"task_id": "HumanEval/40", "completion": "\n\n    l.sort() # Sort the list in ascending order\n    for i in range(len(l)-2): # Loop through the list till the third last element\n        if i > 0 and l[i] == l[i-1]:\n            continue # Skip the current iteration if the current element is equal to the previous element\n        left = i+1 # Left index\n        right = len(l)-1 # Right index\n        while left < right: # Looping till the left and right indices cross each other\n            current_sum = l[i] + l[left] + l[right] # Calculate the current sum of the triplet\n            if current_sum == 0:\n                return True # If the sum is zero, then return True\n            elif current_sum < 0:\n                left += 1 # If the sum is less than zero, move the left index to the right\n            else:\n                right -= 1 # If the sum is greater than zero, move the right index to the left\n    return False # Return False if no triplet is found"}
{"task_id": "HumanEval/41", "completion": "\n    # We can solve this problem mathematically.\n    # The distance between two cars is fixed and each car moves at a fixed speed.\n    # Hence, the time when two cars will meet can be calculated by dividing the distance and speed.\n    # If we sort the left to right moving cars and right to left moving cars by their initial positions,\n    # we can compare each pair of cars at the same index. If the left to right car is ahead of the\n    # right to left car, we don't need to check the next pair of cars because they won't collide.\n    # We can use this logic to count the number of collisions.\n\n    # First we generate the initial positions of left to right and right to left moving cars\n    left_to_right_cars = sorted(list(range(1, n+1)))\n    right_to_left_cars = sorted(list(range(1, n+1)), reverse=True)\n\n    # Initialize the collision count\n    collision_count = 0\n\n    # Compare cars at the same index and check if they will collide\n    for i in range(n):\n        if left_to_right_cars[i] >= right_to_left_cars[i]:\n            break\n        else:\n            collision_count += 1\n\n    return collision_count"}
{"task_id": "HumanEval/42", "completion": "    \"\"\"\n    Return list with elements incremented by 1.\n\n    :param l: A list of integers\n    :type l: list\n    :return: A list with elements incremented by 1\n    :rtype: list\n    \"\"\"\n    return [i+1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    # loop through the list\n    for i in range(len(l)):\n        # loop through the list starting from the next element\n        for j in range(i+1, len(l)):\n            # check if the two elements add up to zero\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"task_id": "HumanEval/44", "completion": "\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        quotient, remainder = divmod(x, base)\n        result += str(remainder)\n        x = quotient\n    # reverse the order of result and return\n    return result[::-1]"}
{"task_id": "HumanEval/45", "completion": "\n    area = 0.5 * a * h # formula to calculate the area of triangle\n    return area"}
{"task_id": "HumanEval/46", "completion": "\n    \n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        # initialize a list to store previous 4 elements\n        prev_4 = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            # calculate the next element as the sum of previous 4 elements\n            next_fib4 = sum(prev_4)\n            # update the previous 4 elements by shifting one to the left\n            prev_4 = prev_4[1:] + [next_fib4]\n        return prev_4[-1]"}
{"task_id": "HumanEval/47", "completion": "    \"\"\"\n    Return median of elements in the list l.\n    \"\"\"\n    l.sort() # sort the list in ascending order\n    n = len(l)\n    if n % 2 == 0: # if n is even\n        # return the average of middle two elements\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else: # if n is odd\n        # return the middle element\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    # Remove all non-alphanumeric characters from the text and convert it to lowercase\n    text = ''.join([char.lower() for char in text if char.isalnum()])\n    \n    # Check if the text is equal to its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "\n    \n    # We will use binary exponentiation method to calculate\n    # 2^n mod p in O(log n) time complexity.\n    \n    # Initialize result = 1\n    result = 1\n    \n    # Convert n to binary\n    binary_n = bin(n)[2:]\n    \n    # Loop through the binary string\n    for digit in binary_n:\n        # Square result\n        result = (result * result) % p\n        \n        # If digit is 1, multiply by 2\n        if digit == '1':\n            result = (result * 2) % p\n    \n    # Return result\n    return result"}
