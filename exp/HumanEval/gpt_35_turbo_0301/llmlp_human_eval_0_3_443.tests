["assert x_or_y(3, 5, 6) == 5", "assert x_or_y(29, 123, 456) == 123", "assert x_or_y(5, \"hello\", \"world\") == \"hello\"", "assert x_or_y(20, None, \"\") == \"\"", "assert x_or_y(30, [1, 2, 3], {4, 5, 6}) == {4, 5, 6}", "assert x_or_y(2, 3, 4) == 3", "assert x_or_y(11, True, False) == True", "assert x_or_y(15, \"foo\", \"bar\") == \"bar\"", "assert x_or_y(27, {\"key\": \"value\"}, {\"key1\": \"value1\"}) == {\"key1\": \"value1\"}", "assert x_or_y(2, \"yes\", \"no\") == \"yes\"", "assert x_or_y(7, 34, 12) == 34", "assert x_or_y(11, [1, 2, 3], []) == [1, 2, 3]", "assert x_or_y(23, \"hello\", \"world\") == \"hello\"", "assert x_or_y(6, 10, 20) == 20", "assert x_or_y(15, 8, 5) == 5", "assert x_or_y(67, \"apple\", \"banana\") == \"apple\""]
["assert double_the_difference([1, 2.5, 3.5, -1]) == 10", "assert double_the_difference([9, -2]) == 81", "assert double_the_difference([0]) == 0", "assert double_the_difference([-1, -2, 0]) == 0", "assert double_the_difference([]) == 0", "assert double_the_difference([1, 3, 2, 0]) == 10", "assert double_the_difference([1, 2, 3, -4, 5, 6, 7]) == 84", "assert double_the_difference([1.5, 2, 3.3]) == 10", "assert double_the_difference([9, -2]) == 81", "assert double_the_difference([0]) == 0", "assert double_the_difference([2, 4, 6]) == 0", "assert double_the_difference([-1, -2, 0]) == 0", "assert double_the_difference([]) == 0", "assert double_the_difference([1, 3, 2, 0]) == 10"]
["assert compare([1,0,0,0,0,0],[0,0,0,0,0,0]) == [1,0,0,0,0,0]", "assert compare([1,0,0,0,0,0],[1,0,0,0,0,0]) == [0,0,0,0,0,0]", "assert compare([1,1,1,1,1,1],[1,1,1,1,1,1]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]", "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]", "assert compare([1,1,1,1,1,-1],[1,1,1,1,1,1]) == [0,0,0,0,0,2]", "assert compare([1,2,3,4,5,1],[1,2,3,4,5,1]) == [0,0,0,0,0,0]", "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]", "assert compare([0,0,0,0],[0,0,0,0]) == [0,0,0,0]", "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]", "assert compare([1,2,3,4,5,1],[0,0,0,0,0,0]) == [1,2,3,4,5,1]", "assert compare([0,0,0,0,0,0],[1,2,3,4,5,1]) == [1,2,3,4,5,1]"]
["assert Strongest_Extension('class', ['Abc', 'def', 'GHI']) == 'class.Abc'", "assert Strongest_Extension('Test', ['a', 'aa', 'aaa']) == 'Test.aaa'", "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "assert Strongest_Extension('ClassName', ['Extension', 'OtherExtension', 'TheExtension']) == 'ClassName.TheExtension'", "assert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'", "assert Strongest_Extension('Testing', ['a', 'b', 'c']) == 'Testing.a'", "assert Strongest_Extension('AnotherClass', ['First', 'Second', 'Th1rd']) == 'AnotherClass.Th1rd'", "assert Strongest_Extension('SomeClass', ['one', 'Two', 'Three']) == 'SomeClass.Two'", "assert Strongest_Extension('Class', ['a', 'B', 'c', 'D']) == 'Class.B'", "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "assert Strongest_Extension('class', ['AAA', 'aAa', 'BbB', 'cc']) == 'class.AAA'", "assert Strongest_Extension('NewClass', ['One', 'two', 'three', 'four', 'FIVE']) == 'NewClass.FIVE'"]
["assert cycpattern_check(\"himenss\",\"simen\") == True", "assert cycpattern_check(\"abcabc\",\"bca\") == True", "assert cycpattern_check(\"abcd\",\"abd\") == False", "assert cycpattern_check(\"efef\",\"eeff\") == False", "assert cycpattern_check(\"hello\",\"ell\") == True", "assert cycpattern_check(\"abab\",\"baa\") == True", "assert cycpattern_check(\"whassup\",\"psus\") == False", "assert cycpattern_check(\"himenss\",\"sinmen\") == False", "assert cycpattern_check(\"abcabc\",\"bcd\") == False"]
["assert even_odd_count(-12) == (1, 1)", "assert even_odd_count(13579) == (0, 5)", "assert even_odd_count(24680) == (5, 0)", "assert even_odd_count(123) == (1, 2)", "assert even_odd_count(0) == (1, 0)", "assert even_odd_count(-12) == (1, 1)", "assert even_odd_count(13579) == (0, 5)", "assert even_odd_count(222) == (3, 0)", "assert even_odd_count(-2468) == (4, 0)", "assert even_odd_count(987654321) == (0, 9)", "assert even_odd_count(123) == (1, 2)", "assert even_odd_count(0) == (1, 0)"]
["assert int_to_mini_roman(40) == 'xl'", "assert int_to_mini_roman(14) == 'xiv'", "assert int_to_mini_roman(89) == 'lxxxix'", "assert int_to_mini_roman(49) == 'xlix'", "assert int_to_mini_roman(400) == 'cd'", "assert int_to_mini_roman(500) == 'd'", "assert int_to_mini_roman(152) == 'clii'", "assert int_to_mini_roman(100) == 'c'", "assert int_to_mini_roman(900) == 'cm'", "assert int_to_mini_roman(9) == 'ix'", "assert int_to_mini_roman(40) == 'xl'", "assert int_to_mini_roman(333) == 'cccxxxiii'", "assert int_to_mini_roman(19) == 'xix'", "assert int_to_mini_roman(444) == 'cdxliv'", "assert int_to_mini_roman(500) == 'd'", "assert int_to_mini_roman(152) == 'clii'", "assert int_to_mini_roman(100) == 'c'", "assert int_to_mini_roman(20) == 'xx'", "assert int_to_mini_roman(900) == 'cm'", "assert int_to_mini_roman(9) == 'ix'"]
["assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(5, 5, 5) == False # Equilateral triangle can't be right-angled", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(0, 0, 0) == False # A triangle can't have 0 length sides", "assert right_angle_triangle(3, 5, 5) == False # A triangle with unequal sides can't be right-angled.", "assert right_angle_triangle(3, 3, 6) == False # A triangle with unequal sides can't be right-angled.", "assert right_angle_triangle(5, 3, 4) == True", "assert right_angle_triangle(5, 4, 3) == True", "assert right_angle_triangle(10, 24, 26) == True", "assert right_angle_triangle(8, 15, 17) == True", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(4, 5, 3) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(12, 16, 20) == True", "assert right_angle_triangle(9, 12, 15) == False", "assert right_angle_triangle(4, 3, 5) == True", "assert right_angle_triangle(6, 8, 10) == True", "assert right_angle_triangle(7, 8, 9) == False"]
["assert find_max([\"word\", \"world\", \"work\", \"war\"]) == \"world\"", "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"", "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"", "assert find_max([\"aa\", \"bb\", \"cc\"]) == \"aa\"", "assert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"", "assert find_max([\"hello\", \"world\", \"python\"]) == \"python\"", "assert find_max([]) == \"\"", "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"", "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"", "assert find_max([\"abcde\", \"bcdef\"]) == \"bcdef\"", "assert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"", "assert find_max([\"abcde\", \"fghij\"]) == \"abcde\"", "assert find_max([\"aaa\", \"aaa\", \"a\"]) == \"aaa\""]
["assert eat(5, 6, 10) == [11, 4]", "assert eat(0, 0, 10) == [0, 10]", "assert eat(1, 10, 10) == [11, 0]", "assert eat(500, 500, 1000) == [1000, 0]", "assert eat(0, 5, 0) == [0, 0]", "assert eat(0, 0, 0) == [0, 0]", "assert eat(1000, 0, 1000) == [1000, 1000]", "assert eat(2, 11, 5) == [7, 0]", "assert eat(4, 8, 9) == [12, 1]", "assert eat(5, 6, 10) == [11, 4]", "assert eat(0, 1000, 0) == [0, 0]", "assert eat(500, 500, 500) == [1000, 0]", "assert eat(1, 10, 10) == [11, 0]", "assert eat(0, 0, 0) == [0, 0]", "assert eat(1000, 0, 1000) == [1000, 1000]", "assert eat(2, 11, 5) == [7, 0]", "assert eat(4, 8, 9) == [12, 1]"]
["assert do_algebra(['+', '-', '*', '//'], [1, 2, 3, 4, 5]) == -4", "assert do_algebra(['**', '/', '-', '+'], [2, 3, 4, 5, 1]) == -3", "assert do_algebra(['+', '-', '*'], [2, 3, 4, 5]) == 11", "assert do_algebra(['-', '**'], [5, 3, 2]) == -4", "assert do_algebra(['*', '-', '+'], [1, 2, 3, 4, 5]) == -4", "assert do_algebra(['//', '+', '**'], [4, 3, 2, 5]) == 289", "assert do_algebra(['+', '*', '//'], [6, 2, 10]) == 17", "assert do_algebra(['*', '**', '+'], [1, 2, 3, 4]) == 13", "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "assert do_algebra(['//', '+', '-'], [10, 5, 2, 1]) == 2", "assert do_algebra(['*', '+'], [10, 5, 2]) == 60", "assert do_algebra(['+', '-', '*', '//'], [1, 2, 3]) == 3", "assert do_algebra(['-', '+', '*', '**'], [3, 2, 4, 5, 2]) == 39", "assert do_algebra(['+', '-', '*', '**'], [3, 2, 4, 5]) == 101"]
["assert solve(\"ABC123\") == \"abc123\"", "assert solve(\"###\") == \"###\"", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"\") == \"\"", "assert solve(\"ab\") == \"AB\"", "assert solve(\"1234\") == \"4321\"", "assert solve(\"abc123\") == \"ABC123\"", "assert solve(\"fOoBaR\") == \"FoObAr\"", "assert solve(\"123#\") == \"#321\"", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"\") == \"\"", "assert solve(\"aBcDEfG\") == \"AbCdeFg\"", "assert solve(\"ab\") == \"AB\"", "assert solve(\"1234\") == \"4321\"", "assert solve(\"#$%\") == \"#$%\"", "assert solve(\"ABC\") == \"abc\"", "assert solve(\"tESt\") == \"TeST\""]
["assert string_to_md5('This is a test') == hashlib.md5('This is a test'.encode()).hexdigest()", "assert string_to_md5('12345') == hashlib.md5('12345'.encode()).hexdigest()", "assert string_to_md5('') == None", "assert string_to_md5('Hello World') == hashlib.md5('Hello World'.encode()).hexdigest()", "assert string_to_md5('md5') == '1bc29b36f623ba82aaf6724fd3b16718'", "assert string_to_md5('') == None", "assert string_to_md5('1234567890') == 'e807f1fcf82d132f9bb018ca6738a19f'", "assert string_to_md5('The quick brown fox jumps over the lazy dog') == '9e107d9d372bb6826bd81d3542a419d6'", "assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "assert string_to_md5('abcdefghijklmnopqrstuvwxyz') == 'c3fcd3d76192e4007dfb496cca67e13b'"]
["assert generate_integers(10, 20) == [0, 2, 4, 6, 8]", "assert generate_integers(100, 200) == [0, 2, 4, 6, 8]", "assert generate_integers(123456, 123456) == [2, 4, 6]", "assert generate_integers(0, 0) == []", "assert generate_integers(200, 100) == [0, 2, 4, 6, 8]", "assert generate_integers(999, 1000) == [0, 2, 4, 6, 8]", "assert generate_integers(100, 101) == [0]", "assert generate_integers(20, 10) == [0, 2, 4, 6, 8]", "assert generate_integers(3, 9) == [4, 6, 8]", "assert generate_integers(10, 14) == []", "assert generate_integers(22, 28) == [2, 2, 2, 4, 6, 8]", "assert generate_integers(2, 8) == [2, 4, 6, 8]", "assert generate_integers(20, 40) == [2, 2, 2, 2, 2, 4]", "assert generate_integers(8, 2) == [2, 4, 6, 8]", "assert generate_integers(10, 14) == []"]
