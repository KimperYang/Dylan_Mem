{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "completion": "\n    # Check if the list is empty\n    if not lst:\n        return 0\n    \n    # Initialize the sum of squares of odd numbers to 0\n    sum_of_squares = 0\n    \n    # Loop through each number in the list\n    for num in lst:\n        # Check if the number is positive and an integer\n        if isinstance(num, int) and num > 0:\n            # Check if the number is odd\n            if num % 2 != 0:\n                # Add the square of the number to the sum\n                sum_of_squares += num ** 2\n    \n    # Return the sum of squares\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "completion": "    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "    # loop through the list of extensions and compute the strength for each\n    strengths = [(ext, sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())) for ext in extensions]\n    # sort the list of extensions based on their strength, descending order\n    strengths.sort(key=lambda x: x[1], reverse=True)\n    # choose the strongest extension and return it as a string in the specified format\n    strongest = strengths[0][0]\n    return '{}.{}'.format(class_name, strongest)\n"}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "\n    roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', \n             100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n\n    result = \"\"\n    for value, numeral in sorted(roman.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/157", "completion": "\n    # Using the Pythagorean Theorem to check if c is the hypotenuse\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with the maximum number\n    of unique characters. If multiple strings have the maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    :param words: list of strings\n    :return: string\n\n    Examples:\n    >>> find_max([\"name\", \"of\", \"string\"])\n    'string'\n    >>> find_max([\"name\", \"enam\", \"game\"])\n    'enam'\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    'aaaaaaa'\n    \"\"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        count = len(unique_chars)\n        if count > max_count:\n            max_count = count\n            max_word = word\n        elif count == max_count and word < max_word:\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    #calculate the total number of eaten carrots\n    total_eaten = number + min(need, remaining)\n    #calculate the number of remaining carrots\n    remaining_carrots = remaining - min(need, remaining)\n    #return the results as an array\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "completion": "\n    # initialize result as first operand\n    result = operand[0]\n    \n    # iterate through operators and operands simultaneously\n    for i in range(len(operator)):\n        \n        # apply current operator to result and next operand\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    \n    return result"}
{"task_id": "HumanEval/161", "completion": "\n    # Check if there are any letters in the string\n    if all(not c.isalpha() for c in s):\n        # If no letters found, reverse the string\n        return s[::-1]\n    else:\n        # Convert each character to its opposite case if it's a letter, otherwise keep it as is\n        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)"}
{"task_id": "HumanEval/162", "completion": "\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "\n    # Initialize an empty list to store even digits\n    even_digits = []\n    \n    # swap a and b if a is greater than b\n    if a > b:\n        a, b = b, a\n    \n    # Iterate over the range a to b+1\n    for num in range(a, b+1):\n        # Convert the number to a string\n        num_str = str(num)\n        # Iterate over each digit in the num_str\n        for digit in num_str:\n            # Check if the digit is even and not already in the even_digits list\n            if int(digit) % 2 == 0 and int(digit) not in even_digits:\n                # Append the digit to the even_digits list\n                even_digits.append(int(digit))\n                \n    # Sort the even_digits list in ascending order\n    even_digits.sort()\n    \n    # Return the even_digits list\n    return even_digits"}
