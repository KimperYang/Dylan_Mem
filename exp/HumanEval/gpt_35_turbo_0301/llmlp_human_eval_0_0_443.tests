["assert has_close_elements([1.0, 2.0, 3.0], 0.5) == False", "assert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.0) == False", "assert has_close_elements([1.9, 2.0, 3.0, 4.0], 0.2) == True", "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) == True", "assert has_close_elements([1.0, 2.0, 3.0, 4.0], 0.9) == False", "assert has_close_elements([1.0, 2.0, 3.0], 1.0) == False", "assert has_close_elements([], 0.1) == False", "assert has_close_elements([1.0, 2.0, 2.5, 3.0, 2.0], 0.5) == True", "assert has_close_elements([1.0, 2.0, 2.7, 3.0, 4.0], 0.6) == True", "assert has_close_elements([1.0, 1.5, 2.0, 2.5, 3.0], 0.1) == False", "assert has_close_elements([1.0, 1.5, 2.0, 2.5, 3.0], 0.6) == False", "assert has_close_elements([2.0, 1.0, 3.0], 0.4) == False", "assert has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.6) == False", "assert has_close_elements([1.0, 1.5, 2.0, 2.5, 3.0], 0.2) == True", "assert has_close_elements([1.0, 1.0, 1.0, 1.0, 2.0], 0.9) == True", "assert has_close_elements", "assert has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True", "assert has_close_elements([1.0, 1.0, 1.0, 1.0], 0.1) == True", "assert has_close_elements([2.0, 1.0, 3.0], 0.6) == False", "assert has_close_elements([1.0], 0.5) == False"]
["assert separate_paren_groups('()') == ['()']", "assert separate_paren_groups('((()))') == ['((()))']", "assert separate_paren_groups('(())(())') == ['(())', '(())']", "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']", "assert separate_paren_groups('()()()()()') == ['()', '()', '()', '()', '()']", "assert separate_paren_groups('((()))(())') == ['((()))', '(())']", "assert separate_paren_groups('()((()))()') == ['()', '((()))', '()']", "assert separate_paren_groups('(())') == ['(())']", "assert separate_paren_groups('()((()))(())(((())))()') == ['()', '((()))', '(())', '(((())))', '()']", "assert separate_paren_groups('(()) (()) (())') == ['(())', '(())', '(())']", "assert separate_paren_groups('( )') == ['()']", "assert separate_paren_groups('()') == ['()']", "assert separate_paren_groups('((()))') == ['((()))']", "assert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']", "assert separate_paren_groups('(  ) (  ) ((   ))') == ['()', '()', '(())']", "assert separate_paren_groups('((())) () ((((( )))))') == ['((()))', '()', '(((( )))))']", "assert separate_paren_groups('') == []"]
["assert truncate_number(2.718281828) == 0.718281828", "assert truncate_number(9.9999) == 0.9999", "assert truncate_number(100.123) == 0.123", "assert truncate_number(0.9999) == 0.9999", "assert truncate_number(3.14) == 0.14", "assert truncate_number(0.5) == 0.5", "assert truncate_number(1.0) == 0.0", "assert truncate_number(3.5) == 0.5", "assert truncate_number(0.75) == 0.75", "assert truncate_number(5) == 0.0", "assert truncate_number(0.00001) == 0.00001", "assert truncate_number(1.23456789) == 0.23456789", "assert truncate_number(10.0) == 0.0", "assert truncate_number(6.8) == 0.8", "assert truncate_number(100.12345) == 0.12345", "assert truncate_number(0) == 0.0", "assert truncate_number(9.28) == 0.28"]
["assert below_zero([100, 200, -100, -50, 50]) == True", "assert below_zero([0, 1, 2, 3, 4, 5]) == False", "assert below_zero([0, 1, 2, -3, 4, 5]) == True", "assert below_zero([10, -5, 5, -10]) == True", "assert below_zero([100, 200, -100, -50, 100]) == False", "assert below_zero([-1, -2, -3]) == True", "assert below_zero([0]) == False", "assert below_zero([1, 2, 3]) == False", "assert below_zero([3, -2, 5, -4]) == True", "assert below_zero([100, -100, 200, -200, 300]) == True", "assert below_zero([1, 2, -4, 5]) == True", "assert below_zero([50, 20, -70, 30, -20]) == True", "assert below_zero([]) == False"]
["assert mean_absolute_deviation([10.0, 20.0, 30.0, 40.0, 50.0]) == 16.0", "assert mean_absolute_deviation([2.0, 2.0, 2.0, 2.0]) == 0.0", "assert mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0]) == 1.0", "assert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5]) == 1.0", "assert mean_absolute_deviation([0.0, 0.0, 0.0, 0.0]) == 0.0", "assert mean_absolute_deviation([1.0, 3.0, 5.0, 7.0, 9.0]) == 2.0", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0", "assert mean_absolute_deviation([0.5]) == 0.0", "assert mean_absolute_deviation([2.5, 4.5, 6.5, 8.5]) == 2.0", "assert mean_absolute_deviation([5.0, 5.0, 5.0, 5.0]) == 0.0", "assert mean_absolute_deviation([-1.0, -2.0, 3.0, 4.0]) == 2.0", "assert mean_absolute_deviation([1.5, 2.5, 3.5, 4.5, 5.5]) == 1.0", "assert mean_absolute_deviation([0.0, 1.0, 2.0, 3.0, 4.0]) == 1.5", "assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0"]
["assert intersperse([1, 2, 3], 0) == [1, 2, 3]", "assert intersperse([1, 1, 1, 1], 5) == [1, 5, 1, 5, 1, 5, 1]", "assert intersperse([10, 20], 50) == [10, 50, 20]", "assert intersperse([9], 4) == [9]", "assert intersperse([], 4) == []", "assert intersperse([5, 8, 1, 4], 0) == [5, 8, 1, 4]", "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]", "assert intersperse([1], 4) == [1]", "assert intersperse([1, 2, 3, 4], 5) == [1, 5, 2, 5, 3, 5, 4]", "assert intersperse([], 4) == []", "assert intersperse([1, 2, 3, 4], 4) == [1, 4, 2, 4, 3, 4, 4]", "assert intersperse([1, 2], 0) == [1, 2]", "assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]"]
["assert parse_nested_parens('() ((((())))) ()') == [0, 8, 0]", "assert parse_nested_parens('() ()() (())') == [1, 1, 2]", "assert parse_nested_parens('(()()) ((())) () ((())()())') == [2, 3, 1, 3]", "assert parse_nested_parens('(()) () (()()) ((()))') == [1, 0, 2, 3]", "assert parse_nested_parens('(((()))) (((()))) ()') == [6, 5, 1]", "assert parse_nested_parens('((())) (()()) ()') == [3, 2, 1]", "assert parse_nested_parens('() () ()') == [1, 1, 1]", "assert parse_nested_parens('((())()())) (()) ()') == [4, 2, 1]", "assert parse_nested_parens('((((( ))))) (()()) ()') == [5, 2, 1]", "assert parse_nested_parens('((((()())())())())())') == [6]", "assert parse_nested_parens('(((())())()()) ((()))') == [4, 3]"]
["assert filter_by_substring(['python', 'java', 'c++', 'javascript'], 'script') == ['javascript']", "assert filter_by_substring(['python', 'java', 'c++', 'javascript'], 'py') == ['python']", "assert filter_by_substring(['apple', 'banana', 'orange'], 'z') == []", "assert filter_by_substring(['simple', 'complex', 'easy', 'hard'], 'e') == ['complex', 'easy']", "assert filter_by_substring(['apple', 'banana', 'orange'], 'an') == ['banana', 'orange']", "assert filter_by_substring(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']", "assert filter_by_substring(['abc', 'def', 'ghi'], 'DEF') == []", "assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']", "assert filter_by_substring(['', 'abc', '', 'cde'], '') == ['', '', '']", "assert filter_by_substring([], 'a') == []", "assert filter_by_substring(['abc', 'def', 'ghi'], 'DEF', ignore_case=True) == ['def']", "assert filter_by_substring(['', 'abc', '', 'cde'], 'a') == ['abc']", "assert filter_by_substring(['hello', 'world', 'foo', 'bar'], 'z') == []", "assert filter_by_substring(['hello', 'world', 'foo', 'bar'], 'o') == ['hello', 'world', 'foo']"]
["assert sum_product([0, 0, 0, 0]) == (0, 0)", "assert sum_product([]) == (0, 1)", "assert sum_product([2, 4, 6, 8]) == (20, 384)", "assert sum_product([1, 2, 3, 4]) == (10, 24)", "assert sum_product([5]) == (5, 5)", "assert sum_product([1, -2, 3, -4, 5]) == (3, 120)", "assert sum_product([-1, 0, 1]) == (0, 0)", "assert sum_product([]) == (0, 1)", "assert sum_product([-1, 5, 7, 2]) == (13, -70)", "assert sum_product([2, 5, -3]) == (4, -30)", "assert sum_product([0]) == (0, 0)", "assert sum_product([1, 2, 3, 4]) == (10, 24)", "assert sum_product([3, 5, 1]) == (9, 15)"]
["assert rolling_max([-1, -2, -3, -2, -3, -4, -2]) == [-1, -1, -1, -1, -1, -1, -1]", "assert rolling_max([1, 2, 2, 3, 3, 3, 2, 2, 2]) == [1, 2, 2, 3, 3, 3, 3, 3, 3]", "assert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert rolling_max([1, 5, 2, 4, 3]) == [1, 5, 5, 5, 5]", "assert rolling_max([1]) == [1]", "assert rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]", "assert rolling_max([1, -2, 3, -4, 5]) == [1, 1, 3, 3, 5]", "assert rolling_max([]) == []", "assert rolling_max([1, 1, 1, 1]) == [1, 1, 1, 1]", "assert rolling_max([1, 2, 3, 2, 3, 4, 2]) == [1, 2, 3, 3, 3, 4, 4]", "assert rolling_max([3, 2, 1]) == [3, 3, 3]", "assert rolling_max([2]) == [2]", "assert rolling_max([9, 8, 7, 6, 5, 4, 3]) == [9, 9, 9, 9, 9, 9, 9]", "assert rolling_max([1, 2, 3]) == [1, 2, 3]", "assert rolling_max([]) == []", "assert rolling_max([1, 1, 1, 1]) == [1, 1, 1, 1]"]
["assert make_palindrome('') == ''", "assert make_palindrome('race') == 'racecar'", "assert make_palindrome('a') == 'a'", "assert make_palindrome('cat') == 'catac'", "assert make_palindrome('test') == 'testset'", "assert make_palindrome('noon') == 'noon'", "assert make_palindrome('level') == 'level'", "assert make_palindrome(\"racecar\") == \"racecar\"", "assert make_palindrome(\"abba\") == \"abba\"", "assert make_palindrome(\"hello\") == \"helloleh\"", "assert make_palindrome(\"cat\") == \"catac\"", "assert make_palindrome(\"level\") == \"level\"", "assert make_palindrome(\"\") == \"\"", "assert make_palindrome(\"madam\") == \"madam\"", "assert make_palindrome(\"redder\") == \"redder\"", "assert make_palindrome(\"cata\") == \"catac\""]
["assert string_xor('1111', '1111') == '0000'", "assert string_xor('010101', '101010') == '111111'", "assert string_xor('000', '111') == '111'", "assert string_xor('0', '1') == '1'", "assert string_xor('101', '010') == '111'", "assert string_xor('101010', '111000') == '010010'", "assert string_xor('10', '01') == '11'", "assert string_xor('110011', '001100') == '111111'", "assert string_xor('010', '110') == '100'", "assert string_xor('111111', '111111') == '000000'", "assert string_xor('1', '1') == '0'", "assert string_xor('0000', '1111') == '1111'", "assert string_xor('0', '0') == '0'", "assert string_xor('101010', '010101') == '111111'"]
["assert longest(['aa', 'b', 'c']) == 'aa'", "assert longest(['b', 'a']) == 'b'", "assert longest(['a']) == 'a'", "assert longest(['a', 'bb', 'ccc']) == 'ccc'", "assert longest(['a', 'b']) == 'a'", "assert longest([]) == None", "assert longest(['abc', 'def', 'ghi', 'jkl']) == 'abc'", "assert longest(['a', 'b', 'c']) == 'a'", "assert longest(['hello', 'world', '']) == 'hello'", "assert longest(['a']) == 'a'", "assert longest(['a', 'bb', 'ccc']) == 'ccc'", "assert longest(['', ' ', '  ', '   ']) == '   '", "assert longest([]) == None"]
["assert greatest_common_divisor(25, 15) == 5", "assert greatest_common_divisor(1, 0) == 1", "assert greatest_common_divisor(12, 8) == 4", "assert greatest_common_divisor(17, 13) == 1", "assert greatest_common_divisor(100, 10) == 10", "assert greatest_common_divisor(1, 1) == 1", "assert greatest_common_divisor(81, 27) == 27", "assert greatest_common_divisor(0, 1) == 1", "assert greatest_common_divisor(100, 50) == 50", "assert greatest_common_divisor(200, 25) == 25", "assert greatest_common_divisor(7, 11) == 1", "assert greatest_common_divisor(15, 45) == 15", "assert greatest_common_divisor(81, 27) == 27", "assert greatest_common_divisor(24, 36) == 12", "assert greatest_common_divisor(144, 12) == 12"]
["assert all_prefixes('abc') == ['a', 'ab', 'abc']", "assert all_prefixes('  ') == [' ', '  ']", "assert all_prefixes(' ') == [' ', '']", "assert all_prefixes('12345') == ['1', '12', '123', '1234', '12345']", "assert all_prefixes('a') == ['a']", "assert all_prefixes('ab') == ['a', 'ab']", "assert all_prefixes('') == ['']", "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']", "assert all_prefixes('abc') == ['a', 'ab', 'abc']", "assert all_prefixes('12345') == ['1', '12', '123', '1234', '12345']", "assert all_prefixes('a') == ['a']", "assert all_prefixes('') == ['']", "assert all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello']"]
["assert string_sequence(2) == '0 1 2'", "assert string_sequence(0) == '0'", "assert string_sequence(1) == '0 1'", "assert string_sequence(15) == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'", "assert string_sequence(20) == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'", "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'", "assert string_sequence(5) == '0 1 2 3 4 5'", "assert string_sequence(0) == '0'", "assert string_sequence(1) == '0 1'", "assert string_sequence(500) == ' '.join(str(i) for i in range(501))", "assert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'", "assert string_sequence(5) == '0 1 2 3 4 5'", "assert string_sequence(100) == ' '.join(str(i) for i in range(101))"]
["assert count_distinct_characters('') == 0", "assert count_distinct_characters('xyzXYZ') == 3", "assert count_distinct_characters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 52", "assert count_distinct_characters('1111111') == 1", "assert count_distinct_characters('Jerry') == 4", "assert count_distinct_characters('aaAAaa') == 2", "assert count_distinct_characters('The quick brown fox jumps over the lazy dog') == 26", "assert count_distinct_characters('Hello, world!') == 10", "assert count_distinct_characters('hElliO') == 5", "assert count_distinct_characters('') == 0", "assert count_distinct_characters('mississippi') == 4", "assert count_distinct_characters('12345') == 5", "assert count_distinct_characters('abracadabra') == 5", "assert count_distinct_characters('hello') == 4", "assert count_distinct_characters('abcdefghijklmnopqrstuvwxyz') == 26"]
["assert parse_music('o o o| o| .|') == [4, 4, 2, 2, 1]", "assert parse_music('o o| .| o| o| .| .| .| .| o o') == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "assert parse_music('.| .| .| .| .| .|') == [1, 1, 1, 1, 1, 1]", "assert parse_music('o| o| o| o| o| o| o| o|') == [2, 2, 2, 2, 2, 2, 2, 2]", "assert parse_music('o .| o .| o .| o .| o .|') == [4, 1, 4, 1, 4, 1, 4, 1, 4]", "assert parse_music('o .| o|') == [4, 1, 2]", "assert parse_music('o| o| .| .|') == [2, 2, 1, 1]", "assert parse_music('.| .| o| o| o| o| .| .|') == [1, 1, 2, 2, 2, 4, 1, 1]", "assert parse_music('o| .| .| .| o| .| .| .| o| .| .| .| o| .| .| .|') == [2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1]", "assert parse_music('o o| o| .|') == [4, 2, 2, 1]", "assert parse_music('.| o| o| o| .|') == [1, 2, 2, 2, 1]"]
["assert how_many_times('', 'a') == 0", "assert how_many_times('abcdeabcde', 'bc') == 2", "assert how_many_times('aaa', 'aaa') == 1", "assert how_many_times('a', '') == 0", "assert how_many_times('abcdeabcde', 'bcd') == 1", "assert how_many_times('ababa', 'aba') == 1", "assert how_many_times('aabaa', 'aa') == 2", "assert how_many_times('abababab', 'ba') == 3", "assert how_many_times('aaa', 'a') == 3", "assert how_many_times('abababab', 'aba') == 2", "assert how_many_times('abc', '') == 0", "assert how_many_times('xyz', 'abc') == 0", "assert how_many_times('abababab', 'aba') == 3", "assert how_many_times('abcdabcdabcd', 'abc') == 3", "assert how_many_times('abababab', 'ababa') == 1", "assert how_many_times('aaa', 'a') == 3", "assert how_many_times('abababab', 'abab') == 2", "assert how_many_times('abababab', 'ab') == 4", "assert how_many_times('', '') == 1", "assert how_many_times('aaaa', 'aa') == 3"]
["assert sort_numbers('zero five eight two four') == 'zero two four five eight'", "assert sort_numbers('eight six seven five three oh nine') == 'oh three five six seven eight nine'", "assert sort_numbers('four two zero nine five') == 'zero two four five nine'", "assert sort_numbers('one nine seven three six two') == 'one two three six seven nine'", "assert sort_numbers('eight eight five five nine two two') == 'two two five five eight eight nine'", "assert sort_numbers('five five nine') == 'five five nine'", "assert sort_numbers('eight zero three') == 'zero three eight'", "assert sort_numbers('four six six') == 'four six six'", "assert sort_numbers('five eight one') == 'one five eight'", "assert sort_numbers('one nine') == 'one nine'", "assert sort_numbers('seven five two') == 'two five seven'", "assert sort_numbers('two nine three') == 'two three nine'", "assert sort_numbers('zero four two') == 'zero two four'"]
["assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 2.5, 5.5]) == (5.0, 5.5)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.5, 4.5]) == (4.0, 4.5)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0]) == (4.0, 5.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.5, 4.2, 4.5]) == (4.0, 4.2)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)", "assert find_closest_elements([2.0, 2.0, 2.0]) == (2.0, 2.0)", "assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0]) == (4.0, 5.0)", "assert find_closest_elements([2.0, 3.0]) == (2.0, 3.0)", "assert find_closest_elements([-5.0, 3.0, 2.0, -2.0, 5.0]) == (-2.0, 2.0)"]
["assert rescale_to_unit(input_list) == expected_output", "assert rescale_to_unit([-2.0, -1.0, 0.0, 1.0, 2.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([-2.0, 2.0]) == [0.0, 1.0]", "assert rescale_to_unit([1.0]) == [0.0]", "assert rescale_to_unit([-5.0, -4.0, -3.0, -2.0, -1.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1.0, 2.0, 2.0, 3.0, 4.0, 5.0, 5.0]) == [0.0, 0.16666666666666666, 0.16666666666666666, 0.5, 0.75, 1.0, 1.0]", "assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]", "assert rescale_to_unit([1.0, 2.0]) == [0.0, 1.0]"]
["assert filter_integers([]) == []", "assert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert filter_integers([1, 2, 'a', 'b', 5]) == [1, 2, 5]", "assert filter_integers([0, 'a', 0.1, 0.0]) == [0]", "assert filter_integers(['abc', {}, [], 3.9, 4]) == [4]", "assert filter_integers([1.1, 2.2, 3.3]) == []"]
["assert strlen('Hello, World!') == 13", "assert strlen('the quick brown fox jumps over the lazy dog') == 43", "assert strlen('') == 0", "assert strlen('abcdef') == 6", "assert strlen('12345') == 5", "assert strlen('1234567890') == 10", "assert strlen('a') == 1", "assert strlen('') == 0", "assert strlen('Hello, world!') == 13", "assert strlen('   ') == 3"]
["assert largest_divisor(14) == 7", "assert largest_divisor(8) == 4", "assert largest_divisor(9) == 3", "assert largest_divisor(3) == 1", "assert largest_divisor(11) == 1", "assert largest_divisor(6) == 3", "assert largest_divisor(10) == 5", "assert largest_divisor(4) == 2", "assert largest_divisor(16) == 8", "assert largest_divisor(13) == 1", "assert largest_divisor(50) == 25", "assert largest_divisor(30) == 15", "assert largest_divisor(9) == 3", "assert largest_divisor(21) == 7", "assert largest_divisor(4) == 2", "assert largest_divisor(12) == 6", "assert largest_divisor(15) == 5"]
["assert factorize(2) == [2]", "assert factorize(15) == [3, 5]", "assert factorize(35) == [5, 7]", "assert factorize(12) == [2, 2, 3]", "assert factorize(48) == [2, 2, 2, 2, 3]", "assert factorize(40) == [2, 2, 2, 5]", "assert factorize(21) == [3, 7]", "assert factorize(3) == [3]", "assert factorize(6) == [2, 3]", "assert factorize(28) == [2, 2, 7]"]
["assert remove_duplicates([]) == []", "assert remove_duplicates([1, 1, 1, 1]) == [1]", "assert remove_duplicates([1, 2, 2, 3, 3, 4, 5, 5]) == [1, 4]", "assert remove_duplicates([1]) == [1]", "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]", "assert remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 2, -4]) == [1, 3, -4]", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 1, 1, 1]) == [1]", "assert remove_duplicates([1, 2, 3, 2, 4, 3]) == [1, 4]", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 2, 3, 2, 4]) == [1, 3, 4]"]
["assert flip_case('12345') == '12345'", "assert flip_case('hElLo wOrLd') == 'HeLlO WoRlD'", "assert flip_case('thiS iS a TeSt') == 'THIs Is A tEsT'", "assert flip_case('') == ''", "assert flip_case('Hello') == 'hELLO'", "assert flip_case('12345') == '12345'", "assert flip_case('') == ''", "assert flip_case('Hello') == 'hELLO'", "assert flip_case('a A b B c C') == 'A a B b C c'", "assert flip_case('H3LLo') == 'h3llO'", "assert flip_case('hELLO') == 'Hello'"]
["assert concatenate([]) == ''", "assert concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'", "assert concatenate(['one', 'two', 'three']) == 'onetwothree'", "assert concatenate(['abc']) == 'abc'", "assert concatenate(['']) == ''", "assert concatenate(['hello', 'world']) == 'helloworld'", "assert concatenate(['This', 'is', 'a', 'test']) == 'Thisisatest'", "assert concatenate([]) == ''", "assert concatenate(['<html>', '<head>', '<title>']) == '<html><head><title>'", "assert concatenate(['foo', 'bar', 'baz']) == 'foobarbaz'", "assert concatenate(['hello']) == 'hello'", "assert concatenate(['this', 'is', 'a', 'test']) == 'thisisatest'"]
["assert filter_by_prefix([], 'a') == []", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b') == ['bcd']", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], '') == ['abc', 'bcd', 'cde', 'array']", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']", "assert filter_by_prefix([], '') == []", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd') == []", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c') == ['cde']", "assert filter_by_prefix([], 'a') == []", "assert filter_by_prefix(['apple', 'banana', 'cherry', 'date'], 'e') == []", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b') == ['bcd']", "assert filter_by_prefix(['apple', 'banana', 'cherry', 'date'], 'A') == []", "assert filter_by_prefix(['Apple', 'Banana', 'Cherry', 'Date'], 'A') == ['Apple']", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']", "assert filter_by_prefix(['apple', 'banana', 'cherry', 'date'], 'c') == ['cherry']", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd') == []", "assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c') == ['cde']"]
["assert get_positive([2.1, -4.5, 6.0, -7.8, 9.9, -1.2, 3.4]) == [2.1, 6.0, 9.9, 3.4]", "assert get_positive([]) == []", "assert get_positive([-1, -2, -3, -4, -5]) == []", "assert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert get_positive([0, 1, -1, 2, -2, 3, -3]) == [0, 1, 2, 3]"]
["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(25) == False", "assert is_prime(5) == True", "assert is_prime(67) == True", "assert is_prime(15) == False", "assert is_prime(89) == True", "assert is_prime(90) == False", "assert is_prime(17) == True", "assert is_prime(61) == True", "assert is_prime(2) == True", "assert is_prime(-1) == False", "assert is_prime(3) == True", "assert is_prime(12) == False", "assert is_prime(13) == True", "assert is_prime(14) == False", "assert is_prime(7) == True", "assert is_prime(1) == False", "assert is_prime(5) == True", "assert is_prime(4) == False"]
["assert poly([1,0,1], 2) == 9", "assert round(find_zero([1,0,0,0,-1]), 2) == 1.0", "assert poly([0,0,0], 10) == 0", "assert poly([1,2,3], 2) == 17", "assert round(find_zero([1,2]), 2) == -0.5", "assert round(find_zero([-6,11,-6,1]), 2) == 1.0", "assert round(find_zero([1,0,0,-1]), 2) == 1.0", "assert find_zero(coeffs) is None", "assert math.isclose(find_zero(coeffs), expected, rel_tol=1e-2)"]
["assert sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_third([3, 6, 9]) == [3, 6, 9]", "assert sort_third([9, 6, 3]) == [3, 6, 9]", "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [3, 8, 7, 6, 5, 4, 9, 2, 1]", "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]", "assert sort_third([1]) == [1]", "assert sort_third([1, 2, 3]) == [1, 2, 3]", "assert sort_third([]) == []", "assert sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 6, 4, 5, 3, 7]", "assert sort_third([1, 3, 2, 6, 5, 4]) == [2, 3, 4, 6, 5, 1]", "assert sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 6, 4, 5, 3]", "assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5]", "assert sort_third([1, 2, 3]) == [1, 2, 3]", "assert sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [3, 8, 7, 1, 5, 4, 2, 6, 9]"]
["assert unique([1, 2, 3.0]) == [1, 2, 3.0]", "assert unique([]) == []", "assert unique([1]) == [1]", "assert unique(['a', 'b', 'c', 'a']) == ['a', 'b', 'c']", "assert unique([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert unique([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]", "assert unique([1, 2, 3, 4]) == [1, 2, 3, 4]", "assert unique([]) == []", "assert unique([1, 2, 3]) == [1, 2, 3]", "assert unique([3, 2, 1]) == [1, 2, 3]", "assert unique([5, 5, 5, 5]) == [5]", "assert unique([1, 1, 1]) == [1]", "assert unique([1, 2, 1, 3, 2, 4]) == [1, 2, 3, 4]"]
["assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123", "assert max_element([]) == None # returns None if list is empty", "assert max_element([0, 0, 0]) == 0", "assert max_element([-1, -2, -3]) == -1", "assert max_element([-1.5, -2.5, -0.5]) == -0.5", "assert max_element([1, 2, 3]) == 3", "assert max_element([1.5, 2.5, 0.5]) == 2.5", "assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123", "assert max_element([0]) == 0", "assert max_element([]) == None  # Since there are no elements, None is expected as output.", "assert max_element([1, 2, 3, 4, 5]) == 5", "assert max_element([-1, -2, -3]) == -1", "assert max_element([1, 2, 3]) == 3"]
["assert fizz_buzz(79) == 3", "assert fizz_buzz(40) == 1", "assert fizz_buzz(60) == 2", "assert fizz_buzz(50) == 1", "assert fizz_buzz(30) == 1", "assert fizz_buzz(78) == 2", "assert fizz_buzz(90) == 4", "assert fizz_buzz(70) == 2", "assert fizz_buzz(10) == 0", "assert fizz_buzz(20) == 0", "assert fizz_buzz(100) == 4", "assert fizz_buzz(79) == 3", "assert fizz_buzz(50) == 1", "assert fizz_buzz(30) == 1", "assert fizz_buzz(78) == 2", "assert fizz_buzz(20) == 1", "assert fizz_buzz(1000) == 82", "assert fizz_buzz(777) == 61", "assert fizz_buzz(10) == 0", "assert fizz_buzz(22) == 1"]
["assert sort_even([10, 9, 8, 7, 6, 5]) == [5, 9, 6, 7, 8, 10]", "assert sort_even([1, 0, 3, 2, 5, 4]) == [0, 1, 2, 3, 4, 5]", "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]", "assert sort_even([]) == []", "assert sort_even([4, 2, 1, 3]) == [1, 2, 3, 4]", "assert sort_even([1]) == [1]", "assert sort_even([1, 2, 3]) == [1, 2, 3]", "assert sort_even([1, 3, 5, 7]) == [1, 3, 5, 7]", "assert sort_even([10, 2, 30, 4, 40, 6]) == [2, 10, 4, 30, 6, 40]", "assert sort_even([5, 6, 3, 4]) == [3, 6, 5, 4]", "assert sort_even([2]) == [2]", "assert sort_even([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]", "assert sort_even([1, 2, 3]) == [1, 2, 3]", "assert sort_even([1, 7, 3, 8, 5, 2]) == [1, 7, 2, 8, 5, 3]", "assert sort_even([9, 6, 7, 1, 3, 2, 10, 5]) == [1, 6, 3, 7, 2, 9, 5, 10]"]
["assert encode_cyclic(\"hi\") == \"hi\"", "assert encode_cyclic(\"test\") == \"tset\"", "assert decode_cyclic(\"hi\") == \"hi\"", "assert decode_cyclic(\"ssimipsissi\") == \"mississippi\"", "assert decode_cyclic(\"loleh\") == \"hello\"", "assert decode_cyclic(\"\") == \"\"", "assert encode_cyclic(\"\") == \"\"", "assert encode_cyclic(\"abcdefg\") == \"defgabc\"", "assert decode_cyclic(\"tset\") == \"test\"", "assert encode_cyclic(\"12345\") == \"34512\"", "assert encode_cyclic(\"1234567890\") == \"2345678901\"", "assert encode_cyclic(\"hello world\") == \"elh olrowdl\"", "assert decode_cyclic(\"bcdea\") == \"abcde\"", "assert encode_cyclic(\"abc\") == \"bca\"", "assert decode_cyclic(\"2345678901\") == \"1234567890\"", "assert decode_cyclic(\"a\") == \"a\"", "assert decode_cyclic(\"bca\") == \"abc\"", "assert encode_cyclic(\"abcde\") == \"bcdea\"", "assert decode_cyclic(\"elh olrowdl\") == \"hello world\"", "assert encode_cyclic(\"a\") == \"a\""]
["assert prime_fib(5) == 89", "assert prime_fib(12) == 99194853094755497", "assert prime_fib(3) == 5", "assert prime_fib(6) == 233", "assert prime_fib(4) == 13", "assert prime_fib(7) == 1597", "assert prime_fib(2) == 3", "assert prime_fib(1) == 2", "assert prime_fib(8) == 28657", "assert prime_fib(9) == 514229", "assert prime_fib(5) == 89", "assert prime_fib(3) == 5", "assert prime_fib(6) == 233", "assert prime_fib(4) == 13", "assert prime_fib(7) == 1597", "assert prime_fib(2) == 3", "assert prime_fib(1) == 2", "assert prime_fib(9) == 4807526976", "assert prime_fib(10) == 2971215073", "assert prime_fib(8) == 3524578"]
["assert triples_sum_to_zero([1, 2, -2, -7, 5]) == True", "assert triples_sum_to_zero([0, 0, 0]) == True", "assert triples_sum_to_zero([1]) == False", "assert triples_sum_to_zero([2, -5, 3, 9, 7]) == False", "assert triples_sum_to_zero([1, 3, -2, 1]) == True", "assert triples_sum_to_zero([-1, 0, 1]) == True", "assert triples_sum_to_zero([1, 2, 3, -6, -5, -4]) == True", "assert triples_sum_to_zero([0, 0, 0]) == True", "assert triples_sum_to_zero([1]) == False", "assert triples_sum_to_zero([1, 2, 3, 4, 5]) == False", "assert triples_sum_to_zero([1, 2, 3, -2, 4]) == True"]
["assert car_race_collision(0) == 0", "assert car_race_collision(2) == 1", "assert car_race_collision(5) == 10", "assert car_race_collision(100) == 4950", "assert isinstance(car_race_collision(10), int)", "assert car_race_collision(1) == 0", "assert car_race_collision(3) == 3", "assert car_race_collision(2) == 1", "assert car_race_collision(10) == 45", "assert car_race_collision(5) == 10", "assert car_race_collision(100) == 4950", "assert car_race_collision(1) == 0"]
["assert incr_list([-5, 0, 5, 10]) == [-4, 1, 6, 11]", "assert incr_list([10, 20, 30, 40]) == [11, 21, 31, 41]", "assert incr_list([0, -1, -2, -3]) == [1, 0, -1, -2]", "assert incr_list([]) == []", "assert incr_list([1, 2, 3]) == [2, 3, 4]", "assert incr_list([2.5, 3.5, 4.5]) == [3.5, 4.5, 5.5]", "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]", "assert incr_list([2.5, 3.7, 0.5, -1.2]) == [3.5, 4.7, 1.5, -0.2]", "assert incr_list([]) == []", "assert incr_list([1, 2, 3]) == [2, 3, 4]", "assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]", "assert incr_list([-1, 0, 1]) == [0, 1, 2]"]
["assert pairs_sum_to_zero([0, 1, 2, 3, -3, -5]) == True", "assert pairs_sum_to_zero([1, 2, 3, 0, -5]) == True", "assert pairs_sum_to_zero([1, 2, 3, 4, 5]) == False", "assert pairs_sum_to_zero([0, 0, 0, 0]) == True", "assert pairs_sum_to_zero([-1, 2, 1, 0, -2]) == True", "assert pairs_sum_to_zero([5, -5, 6, 3, 1]) == True", "assert pairs_sum_to_zero([]) == False", "assert pairs_sum_to_zero([1, 2, 3, -1, -2, -3]) == True", "assert pairs_sum_to_zero([1, 2, 3, 7]) == False", "assert pairs_sum_to_zero([0]) == False", "assert pairs_sum_to_zero([1]) == False", "assert pairs_sum_to_zero([1, 3, 5, 0]) == False", "assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True", "assert pairs_sum_to_zero([-1, 1]) == True", "assert pairs_sum_to_zero([1, 3, -2, 1]) == False", "assert pairs_sum_to_zero([1, -1, 2, -2, 3, -3]) == True"]
["assert change_base(0, 3) == '0'", "assert change_base(255, 16) == 'FF'", "assert change_base(15, 16) == 'F'", "assert change_base(15, 8) == '17'", "assert change_base(123, 10) == '123'", "assert change_base(15, 2) == '1111'", "assert change_base(15, 6) == '23'", "assert change_base(8, 3) == '22'", "assert change_base(45, 9) == '50'", "assert change_base(10, 5) == '20'", "assert change_base(27, 4) == '123'", "assert change_base(7, 2) == '111'", "assert change_base(14, 5) == '24'", "assert change_base(8, 2) == '1000'"]
["assert triangle_area(3, 5) == 7.5", "assert triangle_area(0, 10) == 0.0", "assert triangle_area(10, 10) == 50.0", "assert triangle_area(8.2, 2.5) == 10.25", "assert triangle_area(7, 4) == 14.0", "assert triangle_area(5, 0) == 0.0", "assert triangle_area(12.5, 6) == 37.5", "assert triangle_area(0, 6) == 0.0", "assert triangle_area(10, 6) == 30.0", "assert triangle_area(8.5, 2) == 8.5", "assert triangle_area(2, 1) == 1.0", "assert triangle_area(12, 0) == 0.0", "assert triangle_area(7, 4) == 14.0", "assert triangle_area(1, 5) == 2.5", "assert triangle_area(4.5, 3) == 6.75"]
["assert fib4(10) == 90", "assert fib4(12) == 324", "assert fib4(7) == 14", "assert fib4(8) == 26", "assert fib4(1) == 0", "assert fib4(3) == 0", "assert fib4(6) == 8", "assert fib4(2) == 2", "assert fib4(13) == 618", "assert fib4(11) == 170", "assert fib4(9) == 54", "assert fib4(7) == 14", "assert fib4(10) == 104", "assert fib4(14) == 1404", "assert fib4(15) == 2704", "assert fib4(1) == 0", "assert fib4(3) == 0", "assert fib4(6) == 8", "assert fib4(11) == 200", "assert fib4(2) == 2"]
["assert median([2]) == 2", "assert median([5, 4, 3, 2, 1]) == 3", "assert median([0, 0, 0, 1]) == 0.5", "assert median([5, 4, 3, 2, 1, 0]) == 2.5", "assert median([1, 2, 3, 4, 5]) == 3", "assert median([10, 10, 10, 10, 10, 10, 100]) == 10", "assert median([3, 1, 2, 4, 5]) == 3", "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0", "assert median([10, 5, 0, -5, -10]) == 0", "assert median([1, 2, 3, 4]) == 2.5", "assert median([10, 10, 10, 10]) == 10", "assert median([]) == None", "assert median([0, -1, 1]) == 0", "assert median([-10, -5, 0, 5, 10]) == 0", "assert median([2, 4, 6, 8, 10]) == 6", "assert median([3, 1, 2, 4, 5]) == 3", "assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5", "assert median([1]) == 1", "assert median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5", "assert median([-10, 4, 6, 1000, 10, 20]) == 15.0"]
["assert is_palindrome('deified') == True", "assert is_palindrome('abba') == True", "assert is_palindrome('radar') == True", "assert is_palindrome('Madam In Eden, I\u2019m Adam.') == True", "assert is_palindrome('aba') == True", "assert is_palindrome('racecar') == True", "assert is_palindrome('A man a plan a canal Panama') == True", "assert is_palindrome('level') == True", "assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('deified') == True", "assert is_palindrome('python') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('palindromeemordnilap') == True", "assert is_palindrome('level') == True", "assert is_palindrome('') == True", "assert is_palindrome('kayak') == True", "assert is_palindrome('hello') == False"]
["assert modp(10000, 1) == 0  # edge case when p equals 1", "assert modp(1101, 101) == 2", "assert modp(3, 5) == 3", "assert modp(0, 101) == 1", "assert modp(100, 101) == 1", "assert modp(10**18, 10**9+7) == 880995317  # edge case when p is very large", "assert modp(10**18, 7) == 4  # edge case when n is very large", "assert modp(10000, 10000) == 0  # edge case when n >= p", "assert modp(3, 11) == 8", "assert modp(1101, 101) == 2", "assert modp(3, 5) == 3", "assert modp(987654321, 123456789) == 17371617", "assert modp(0, 101) == 1", "assert modp(10, 7) == 5", "assert modp(100, 101) == 1", "assert modp(456, 7890) == 4066", "assert modp(12345, 678) == 309", "assert modp(3, 11) == 8"]
