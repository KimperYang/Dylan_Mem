{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += chr((ord(ch) + 5 - ord('A')) % 26 + ord('A'))\n            else:\n                result += chr((ord(ch) + 5 - ord('a')) % 26 + ord('a'))\n        else:\n            result += ch\n    return result\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    result = \"\"\n    for ch in s:\n        if ch.isalpha():\n            if ch.isupper():\n                result += chr((ord(ch) - 5 - ord('A')) % 26 + ord('A'))\n            else:\n                result += chr((ord(ch) - 5 - ord('a')) % 26 + ord('a'))\n        else:\n            result += ch\n    return result\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = set(\"aeiouAEIOU\")\n    return \"\".join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "completion": "\n    # check if all elements in the list are less than the threshold\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "\n    # Convert both strings to sets to get unique characters only\n    s0_set = set(s0)\n    s1_set = set(s1)\n    # Check if the sets have the same elements\n    return s0_set == s1_set"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "completion": "\n\n    stack = []\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "\n    # If the list is empty or of length 1, it is always monotonic\n    if len(l) < 2:\n        return True\n\n    # Check if it is increasing\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    if increasing:\n        return True\n\n    # Check if it is decreasing\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    if decreasing:\n        return True\n\n    # If neither increasing nor decreasing, then it is not monotonic\n    return False"}
{"task_id": "HumanEval/58", "completion": "    \"\"\"\n    Return sorted unique common elements for two lists.\n\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1).intersection(set(l2))))\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "completion": "    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    # Using Gauss's formula for sum of arithmetic series\n    return n*(n+1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif len(stack) == 0:\n            return False\n        else:\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "\n\n    # The derivative of a polynomial is a polynomial of degree one less than the original.\n    # The derivative of ax^n is anx^(n-1).\n    # The derivative of a0 is 0.\n\n    # Let's initialize the list where we will store the coefficients of the derivative polynomial.\n    derivative_coeffs = []\n    # We skip the first coefficient, which is a0 since its derivative is 0.\n    for i in range(1, len(xs)):\n        # We calculate the derivative of the current term.\n        derivative_term = xs[i] * i\n        # We append the derivative term to the list of derivative coefficients.\n        derivative_coeffs.append(derivative_term)\n    return derivative_coeffs"}
{"task_id": "HumanEval/63", "completion": "\n\n    # Base cases\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize variables\n    a, b, c = 0, 0, 1\n\n    # Compute FibFib sequence\n    for i in range(3, n+1):\n        a, b, c = b, c, a+b+c\n\n    return c"}
{"task_id": "HumanEval/64", "completion": "\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n\n    for i in range(len(s)):\n        if s[i] in vowels or (i == len(s) - 1 and s[i] == 'y'):\n            count += 1\n\n    return count\n\n# Adding more test cases\ndef test_vowels_count():\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"hello\") == 2\n    assert vowels_count(\"python\") == 1\n    assert vowels_count(\"qwertyuiopasdfghjklzxcvbnm\") == 5\n    assert vowels_count(\"Yay\") == 2\n    assert vowels_count(\"banana\") == 3\n    assert vowels_count(\"\") == 0\n    assert vowels_count(\"12345\") == 0\n    assert vowels_count(\"aeiouy\") == 6\n\ntest_vowels_count()"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    n = len(x_str)\n\n    # Use modulo to get true shift value\n    shift = shift % n\n\n    if shift == 0:\n        return x_str\n\n    # If shift > number of digits, return digits reversed\n    if shift > n:\n        return x_str[::-1]\n\n    # Shift the digits right by shift\n    shifted_str = x_str[n - shift:] + x_str[:n - shift]\n\n    return shifted_str"}
{"task_id": "HumanEval/66", "completion": "\n    # Initialize a variable to store the sum of ASCII codes of upper case letters\n    upper_sum = 0\n    \n    # Iterate through each character in the string s\n    for c in s:\n        # Check if the character is an uppercase letter\n        if c.isupper():\n            # Add the ASCII code of the letter to the sum\n            upper_sum += ord(c)\n    \n    # Return the sum of ASCII codes of upper case letters\n    return upper_sum"}
{"task_id": "HumanEval/67", "completion": "    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \n    \"\"\"\n    # split the string into words\n    fruit_list = s.split()\n    # initialize number of apples and oranges to zero\n    num_apples = 0\n    num_oranges = 0\n    # loop through the words\n    for idx in range(len(fruit_list)):\n        # if the word is apple or apples\n        if fruit_list[idx] == 'apple' or fruit_list[idx] == 'apples':\n            # get the previous word assuming it's the number\n            num_apples = int(fruit_list[idx-1])\n        # if the word is orange or oranges\n        elif fruit_list[idx] == 'orange' or fruit_list[idx] == 'oranges':\n            # get the previous word assuming it's the number\n            num_oranges = int(fruit_list[idx-1])\n    # subtract the number of apples and oranges from the total number of fruits\n    num_mangoes = n - num_apples - num_oranges\n    # return the number of mangoes\n    return num_mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even_value = float('inf') # Initialize smallest_even_value to infinity\n    smallest_even_value_index = float('inf') # Initialize smallest_even_value_index to infinity\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even_value: # If the current value is even and less than current smallest_even_value\n            smallest_even_value = arr[i] # Update smallest_even_value to the current value\n            smallest_even_value_index = i # Update smallest_even_value_index to the current index\n        elif arr[i] % 2 == 0 and arr[i] == smallest_even_value and i < smallest_even_value_index: # If the current value is even and equal to current smallest_even_value and its index is less than current smallest_even_value_index\n            smallest_even_value_index = i # Update smallest_even_value_index to the current index\n    if smallest_even_value_index == float('inf'): # If there are no even values\n        return [] # Return empty list\n    else:\n        return [smallest_even_value, smallest_even_value_index] # Return smallest_even_value and its index"}
{"task_id": "HumanEval/69", "completion": "\n    \n    freq_dict = {}\n    greatest_num = -1\n    \n    # create a dictionary of frequencies of elements present in the list\n    for num in lst:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    \n    # find greatest integer with frequency greater than or equal to itself\n    for key in freq_dict:\n        if freq_dict[key] >= key and key > greatest_num:\n            greatest_num = key\n    \n    return greatest_num"}
{"task_id": "HumanEval/70", "completion": "\n\n    # sort the given list first\n    lst.sort()\n\n    # create two empty lists, one for the numbers in the strange order\n    # and the other to store the remaining numbers\n    strange_order_list = []\n    remaining_list = []\n\n    # pop off the minimum value from lst and store it in the strange_order_list\n    # pop off the maximum value of the remaining integers and store it in the strange_order_list\n    # repeat until lst is empty\n    while lst:\n        min_val = lst.pop(0)\n        strange_order_list.append(min_val)\n\n        if lst:\n            max_val = lst.pop()\n            strange_order_list.append(max_val)\n\n    # return the strange_order_list\n    return strange_order_list"}
{"task_id": "HumanEval/71", "completion": "\n    # check if the given sides form a valid triangle\n    if a + b > c and b + c > a and a + c > b:\n        # calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        # calculate the area of the triangle using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # round the area to 2 decimal points and return\n        return round(area, 2)\n    else:\n        # the given sides do not form a valid triangle\n        return -1"}
{"task_id": "HumanEval/72", "completion": "\n    # check if the input list is palindromic\n    if q == q[::-1]:\n        # check if the sum of the elements of the input list is less than or equal to the maximum possible weight\n        if sum(q)<=w:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "\n    i, j = 0, len(arr) - 1\n    count = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "\n    \n    # calculate the total number of chars in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # compare the total number of chars\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2 if total_chars_lst1 != total_chars_lst2 else lst1"}
{"task_id": "HumanEval/75", "completion": "    \"\"\"\n    Returns True if the given number is the multiplication of 3 prime numbers and False otherwise.\n    \n    Args:\n    a : int\n    \n    Returns:\n    bool\n    \n    Example:\n    is_multiply_prime(30) == True\n    Considering, 30 = 2 * 3 * 5\n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"Returns True if the given number is prime, False otherwise\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**(0.5))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    if a < 2 or a > 100:\n        return False\n    \n    prime_factors = []\n    for i in range(2, int(a/2)+1):\n        if a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n    \n    if len(prime_factors) < 3:\n        return False\n    \n    factors_product = 1\n    for factor in prime_factors:\n        factors_product *= factor\n    \n    return factors_product == a\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1:\n        return True\n    elif n == 1 or n == 0:\n        return False\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return False"}
{"task_id": "HumanEval/77", "completion": "    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    elif a < 0:\n        a = -a\n    return round(a**(1/3))**3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    primes = [\"2\",\"3\",\"5\",\"7\",\"B\",\"D\"]\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "    # convert decimal to binary and add extra characters\n    binary = bin(decimal)[2:]\n    binary = 'db' + binary + 'db'\n    return binary\n"}
{"task_id": "HumanEval/80", "completion": "\n    # check if length of string is less than 3, then return False\n    if len(s) < 3:\n        return False\n    \n    # loop through every 3 consecutive letters in the string\n    for i in range(len(s)-2):\n        # check if the 3 letters are distinct, if not return False\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i+2] == s[i]:\n            return False\n    \n    # if the function has not yet returned False, then return True\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n#improved implementation\ndef numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of letter grades\n    based on the following table\n        GPA       |    Letter grade\n        4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n        < 0.0                E\n    :param grades: list of GPAs\n    :return: list of letter grades\n    \"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade < 0:\n            letter_grades.append('E')\n        elif grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    # Check if the length of the string is less than 2\n    if len(string) < 2:\n        return False\n\n    # Check if the length of the string is prime\n    for i in range(2, int(len(string)**0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    \n    # If the length of the string is not divisible by any number other than 1 and itself, return True\n    return True"}
{"task_id": "HumanEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/84", "completion": "\n    # convert integer to string, then to list of digits\n    digits = [int(d) for d in str(N)]\n    \n    # sum the digits and convert to binary\n    binary_sum = bin(sum(digits))[2:]\n    \n    return binary_sum"}
{"task_id": "HumanEval/85", "completion": "\n    # Create an empty list to store even elements at odd indices\n    even_odd_indices = []\n    \n    # Loop through the list\n    for i in range(1, len(lst), 2):\n        # Check if element is even\n        if lst[i] % 2 == 0:\n            # Add the even element to the even_odd_indices list\n            even_odd_indices.append(lst[i])\n    \n    # Sum up the even elements at odd indices\n    sum_even_odd_indices = sum(even_odd_indices)\n    \n    # Return the sum\n    return sum_even_odd_indices"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    new_s = ''\n    for word in words:\n        new_word = ''.join(sorted(word))\n        new_s += new_word + ' '\n    return new_s[:-1]"}
{"task_id": "HumanEval/87", "completion": "\n    res = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                res.append((i, j))\n    res.sort(key=lambda x: x[0])\n    res.sort(key=lambda x: x[1], reverse=True)\n    return res"}
{"task_id": "HumanEval/88", "completion": "\n    sorted_array = array.copy()\n    if len(sorted_array) <= 1:\n        return sorted_array\n\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted(sorted_array, reverse=True)\n    else:\n        return sorted(sorted_array)"}
{"task_id": "HumanEval/89", "completion": "\n    # determine the length of the string\n    length = len(s)\n    # create an empty string to store encrypted message\n    encrypted = \"\"\n    # iterate through the string\n    for i in range(length):\n        # check if the character is an alphabet\n        if s[i].isalpha():\n            # get the ASCII value of the character\n            ascii_val = ord(s[i])\n            # determine the new ASCII value of the character\n            new_ascii_val = ord('a') + ((ascii_val - ord('a')) + (2 * 2)) % 26\n            # append the new character to the encrypted message\n            encrypted += chr(new_ascii_val)\n        else:\n            # if the character is not an alphabet, append it as is to the encrypted message\n            encrypted += s[i]\n    # return the encrypted message\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "\n    unique_nums = list(set(lst))\n    if len(unique_nums) < 2:\n        return None\n    else:\n        unique_nums.sort()\n        return unique_nums[1]"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split(\".\")\n    sentences = [s.strip() for s in sentences]\n    sentences = [s for s in sentences if len(s) > 0]\n    count = 0\n    for sentence in sentences:\n        if sentence[0] == \"I\":\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        \n        # Check if any number is equal to the sum of the other two\n        if x == y+z or y == x+z or z == x+y:\n            return True\n        \n        # If no number is equal to the sum of the other two, return False\n        return False\n    \n    # If any number is not an integer, return False\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    # swap case of all letters\n    message = message.swapcase()\n    new_message = ''\n    for char in message:\n        if char in 'AEIOUaeiou':\n            # replace vowels with letter that appears 2 places ahead\n            new_message += chr(ord(char) + 2)\n        else:\n            new_message += char\n    \n    return new_message"}
{"task_id": "HumanEval/94", "completion": "    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    # function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # initialize variables\n    largest_prime = None\n    largest_prime_sum = 0\n    \n    # loop through list to find the largest prime number\n    for num in lst:\n        if is_prime(num):\n            if largest_prime == None or num > largest_prime:\n                largest_prime = num\n                \n    # if no prime numbers exist in the list, return 0\n    if largest_prime == None:\n        return 0\n    \n    # calculate sum of digits of the largest prime number\n    while largest_prime > 0:\n        largest_prime_sum += largest_prime % 10\n        largest_prime //= 10\n        \n    return largest_prime_sum\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:  # If the dictionary is empty, return False.\n        return False\n    \n    keys = dict.keys()\n    if all(isinstance(key, str) and key.islower() for key in keys):  # All keys are lowercase\n        return True\n    elif all(isinstance(key, str) and key.isupper() for key in keys):  # All keys are uppercase\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/96", "completion": "    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n#Completed function\ndef count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    if n<=1:\n        return []\n    result_list=[]\n    for num in range(2,n):\n        if all(num%i!=0 for i in range(2,int(num**0.5)+1)):\n            result_list.append(num)\n            if len(result_list)==n:\n                break\n    return result_list\n"}
{"task_id": "HumanEval/97", "completion": "    \"\"\"\n    Completes the function that takes two integers and returns \n    the product of their unit digits.\n    \n    Args:\n    a: An integer.\n    b: An integer.\n    \n    Returns:\n    The product of the unit digits of a and b.\n    \n    Assume the input is always valid.\n    \n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    last_digit_a = abs(a) % 10  # get the last digit of a\n    last_digit_b = abs(b) % 10  # get the last digit of b\n    product = last_digit_a * last_digit_b  # multiply the last digits\n    return product\n"}
{"task_id": "HumanEval/98", "completion": "    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n\n    # Define a set of vowels\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n\n    # Initialize a count variable to 0\n    count = 0\n\n    # Loop through the even indices of the string\n    for i in range(0, len(s), 2):\n        # If the character at the even index is an uppercase vowel, increment the count\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n\n    # Return the count\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    value = float(value)\n    return int(value + 0.5 if value > 0 else value - 0.5) # rounding value to nearest integer by adding 0.5 or -0.5 based on sign and casting it to int type"}
