["assert x_or_y(11, 3, 7) == 3  # 11 is a prime number, so should return x", "assert x_or_y(2, 4, 10) == 4  # 2 is a prime number, so should return x", "assert x_or_y(33, 6, 4) == 4  # 33 is not a prime number, so should return y", "assert x_or_y(29, 1, 0) == 1  # 29 is a prime number, so should return x", "assert x_or_y(4, 8, 5) == 5  # 4 is not a prime number, so should return y", "assert x_or_y(25, 9, 2) == 2  # 25 is not a prime number, so should return y", "assert x_or_y(11, 0, 1) == 0", "assert x_or_y(15, 8, 5) == 5", "assert x_or_y(17, 20, 30) == 20", "assert x_or_y(7, 34, 12) == 34", "assert x_or_y(14, 1, 0) == 0", "assert x_or_y(2, 10, 20) == 10", "assert x_or_y(4, 7, 3) == 3"]
["assert double_the_difference([1, 3, 2, 0]) == 10", "assert double_the_difference([9, -2]) == 81", "assert double_the_difference([1.5, 3.5, 2]) == 0", "assert double_the_difference([1, 3, -2, 5]) == 35", "assert double_the_difference([7, 9, 11, 13]) == 440", "assert double_the_difference([-1, -2, 0]) == 0", "assert double_the_difference([0]) == 0", "assert double_the_difference([]) == 0", "assert double_the_difference([1, 3, 2, 0]) == 10", "assert double_the_difference([9, -2]) == 81", "assert double_the_difference([1.5, 2.5, 3.5]) == 0", "assert double_the_difference([1, 3, 5, 7, 9]) == 165", "assert double_the_difference([-1, -2, 0]) == 0", "assert double_the_difference([-1, -3, -5, -7, -9]) == 0", "assert double_the_difference([0]) == 0", "assert double_the_difference([2, 4, 6, 8, 10]) == 0", "assert double_the_difference([]) == 0"]
["assert compare([5,10,15,20,25,30],[30,25,20,15,10,5]) == [25,15,5,5,15,25]", "assert compare([3,3,3,3,3,3],[3,3,3,3,3,3]) == [0,0,0,0,0,0]", "assert compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) == [4,4,1,0,0,6]", "assert compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) == [0,0,0,0,3,3]", "assert compare([1,0,1,0,1,0],[0,1,0,1,0,1]) == [1,1,1,1,1,1]", "assert compare([10,20,30,40,50,60],[60,50,40,30,20,10]) == [50,30,10,10,30,50]"]
["assert Strongest_Extension('class_name', ['ExtEnsiONone', 'ExtENsIoNTwo', 'ExtENsIoNThRee']) == 'class_name.ExtENsIoNTwo'", "assert Strongest_Extension('my_class', ['AA', 'BB', 'CC']) == 'my_class.AA'", "assert Strongest_Extension('class_name', ['eXtEnD', 'EXTENSION', 'Extend']) == 'class_name.eXtEnD'", "assert Strongest_Extension('class_name', ['Extend', 'extend', 'eXtEnD']) == 'class_name.Extend'", "assert Strongest_Extension('class_name', ['Extend', 'EXTENSION', 'eXtEnD']) == 'class_name.EXTENSION'", "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "assert Strongest_Extension('class_name', []) == 'class_name.'", "assert Strongest_Extension('OurClass', ['equal', 'EQUAL', 'Equal']) == 'OurClass.equal'", "assert Strongest_Extension('AnotherClass', ['bB', 'CC', 'aA']) == 'AnotherClass.CC'", "assert Strongest_Extension('HisClass', ['xx', 'YY', 'ZZ']) == 'HisClass.YY'", "assert Strongest_Extension('TestClass', ['SameStrength', 'SAMEStrength', 'samestrength']) == 'TestClass.SameStrength'", "assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'", "assert Strongest_Extension('YourClass', ['lower', 'UPPER', 'Mixed']) == 'YourClass.UPPER'", "assert Strongest_Extension('HerClass', ['a', 'B', 'C']) == 'HerClass.B'"]
["assert cycpattern_check(\"himenss\",\"simen\") == True", "assert cycpattern_check(\"hello\",\"ell\") == True", "assert cycpattern_check(\"abcd\",\"abd\") == False", "assert cycpattern_check(\"xyzzyx\",\"zx\") == True", "assert cycpattern_check(\"abcdef\",\"defabc\") == True", "assert cycpattern_check(\"abcdef\",\"cdefab\") == True", "assert cycpattern_check(\"abab\",\"baa\") == True", "assert cycpattern_check(\"abcdef\",\"abcdefg\") == False", "assert cycpattern_check(\"efef\",\"eeff\") == False", "assert cycpattern_check(\"whassup\",\"psus\") == False", "assert cycpattern_check(\"abab\", \"baa\") == True", "assert cycpattern_check(\"whassup\", \"psus\") == False", "assert cycpattern_check(\"word\", \"ordw\") == True", "assert cycpattern_check(\"hello\", \"leh\") == True", "assert cycpattern_check(\"himenss\", \"simen\") == True", "assert cycpattern_check(\"testcycle\", \"cyclet\") == True", "assert cycpattern_check(\"rotation\", \"onrotati\") == True", "assert cycpattern_check(\"substring\", \"ringsubs\") == False", "assert cycpattern_check(\"abcd\", \"abd\") == False", "assert cycpattern_check(\"concatenate\", \"nacoc\") == True"]
["assert even_odd_count(1111) == (0, 4)", "assert even_odd_count(-13579) == (0, 5)", "assert even_odd_count(123) == (1, 2)", "assert even_odd_count(0) == (1, 0)", "assert even_odd_count(13579) == (0, 5)", "assert even_odd_count(2222) == (4, 0)", "assert even_odd_count(86420) == (5, 0)", "assert even_odd_count(8765) == (2, 2)", "assert even_odd_count(-12) == (1, 1)"]
["assert int_to_mini_roman(1) == 'i'", "assert int_to_mini_roman(42) == 'xlii'", "assert int_to_mini_roman(1000) == 'm'", "assert int_to_mini_roman(444) == 'cdxliv'", "assert int_to_mini_roman(100) == 'c'", "assert int_to_mini_roman(4) == 'iv'", "assert int_to_mini_roman(9) == 'ix'", "assert int_to_mini_roman(999) == 'cmxcix'"]
["assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(6, 8, 10) == True", "assert right_angle_triangle(-3, -4, -5) == False", "assert right_angle_triangle(0, 0, 0) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(5, 9, 11) == False", "assert right_angle_triangle(1, 2, 3) == False", "assert right_angle_triangle(7, 24, 25) == True", "assert right_angle_triangle(6, 8, 10) == True", "assert right_angle_triangle(10, 20, 30) == False", "assert right_angle_triangle(5, 12, 13) == True", "assert right_angle_triangle(3, 4, 5) == True", "assert right_angle_triangle(8, 15, 17) == True", "assert right_angle_triangle(9, 40, 41) == True", "assert right_angle_triangle(6, 7, 8) == False", "assert right_angle_triangle(2, 3, 4) == False"]
["assert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"", "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"", "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"", "assert find_max([\"same\", \"number\", \"of\", \"unique\", \"chars\"]) == \"chars\"", "assert find_max([\"lexical\", \"order\", \"first\"]) == \"lexical\"", "assert find_max([\"first\", \"comes\", \"in\"]) == \"comes\"", "assert find_max([\"if\", \"multiple\", \"have\", \"max\"]) == \"multiple\"", "assert find_max([\"lexicographical\", \"order\"]) == \"lexicographical\"", "assert find_max([\"abc\", \"abc\", \"abc\"]) == \"abc\"", "assert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"", "assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"", "assert find_max([\"abcd\", \"abcde\", \"abced\", \"abc\"]) == \"abcde\"", "assert find_max([\"abcde\", \"abcd\", \"abc\", \"abced\"]) == \"abcde\"", "assert find_max([\"abcde\", \"abcd\", \"abc\"]) == \"abcde\"", "assert find_max([\"name\", \"of\", \"string\"]) == \"string\"", "assert find_max([\"a\", \"aa\", \"aaa\"]) == \"a\"", "assert find_max([\"abc\", \"abcd\", \"abcde\"]) == \"abcde\"", "assert find_max([\"aaa\", \"aa\", \"a\"]) == \"a\""]
["assert eat(5, 6, 10) == [11, 4]", "assert eat(2, 11, 5) == [7, 0]", "assert eat(500, 500, 500) == [1000, 0]", "assert eat(333, 333, 333) == [666, 0]", "assert eat(0, 0, 10) == [0, 10]", "assert eat(0, 10, 0) == [0, 0]", "assert eat(1000, 1000, 500) == [1500, 0]", "assert eat(1, 10, 10) == [11, 0]", "assert eat(1000, 1000, 1000) == [2000, 0]", "assert eat(4, 8, 9) == [12, 1]", "assert eat(5, 6, 10) == [11, 4]", "assert eat(2, 11, 5) == [7, 0]", "assert eat(4, 8, 9) == [13, 0]", "assert eat(0, 10, 5) == [5, 0]", "assert eat(1000, 500, 500) == [1500, 0]", "assert eat(500, 1000, 500) == [1000, 0]", "assert eat(0, 0, 0) == [0, 0]", "assert eat(1, 10, 10) == [11, 0]", "assert eat(1000, 1000, 1000) == [2000, 0]", "assert eat(500, 500, 1000) == [1000, 0]"]
["assert do_algebra(['//', '+', '**'], [4, 2, 2, 3]) == 10", "assert do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5, 6]) == 29", "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "assert do_algebra(['-', '+'], [5, 7, 3]) == 1", "assert do_algebra(['+', '-', '*', '//'], [3, 2, 1, 4, 2]) == 2", "assert do_algebra(['**', '*', '+'], [2, 3, 2, 1]) == 9", "assert do_algebra(['-', '*'], [7, 4, 2]) == 6", "assert do_algebra(['*', '-', '+'], [1, 2, 3, 4]) == -2", "assert do_algebra(['//', '**', '+'], [2, 3, 4, 5]) == 13", "assert do_algebra(['-', '+', '*'], [2, 3, 4, 5]) == 27", "assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9", "assert do_algebra(['-', '-', '-'], [2, 3, 4, 5]) == -10", "assert do_algebra(['+'], [1, 2]) == 3", "assert do_algebra(['+', '+', '+'], [2, 3, 4, 5]) == 14", "assert do_algebra(['*', '-', '+'], [2, 3, 4, 5]) == 3", "assert do_algebra(['**', '**', '*'], [2, 3, 4, 5]) == 134217728", "assert do_algebra(['**', '**', '//'], [2, 3, 2, 5]) == 2", "assert do_algebra(['*', '+', '-'], [2, 3, 4, 5]) == 7"]
["assert solve(\"1234\") == \"4321\"", "assert solve(\"ab\") == \"AB\"", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"1234abcd\") == \"4321ABCD\"", "assert solve(\"HelloWorld\") == \"hELLOWORLD\"", "assert solve(\"!@#$%^&*()\") == \")(*&^%$#@!\"", "assert solve(\"Python3.8\") == \"pYTHON3.8\"", "assert solve(\"aBc123\") == \"AbC123\"", "assert solve(\"1234\") == \"4321\"", "assert solve(\"ab\") == \"AB\"", "assert solve(\"1a2b3c4D\") == \"1A2B3C4d\"", "assert solve(\"#a@C\") == \"#A@c\"", "assert solve(\"ABC123\") == \"abc123\"", "assert solve(\"##@@!!\") == \"!!@@##\"", "assert solve(\"\") == \"\"", "assert solve(\"abCDE\") == \"ABcde\""]
["assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'", "assert string_to_md5('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'b2c13b4897a0637e014b53769ab708a8'", "assert string_to_md5('') == None", "assert string_to_md5('123456') == 'e10adc3949ba59abbe56e057f20f883e'", "assert string_to_md5('abcdefghijklmnopqrstuvwxyz') == 'c3fcd3d76192e4007dfb496cca67e13b'", "assert string_to_md5('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == '1f8ac10f23c5b5bc1167bda84b833e5c'", "assert string_to_md5('test') == '098f6bcd4621d373cade4e832627b4f6'"]
["assert generate_integers(3, 3) == []", "assert generate_integers(1, 5) == [2, 4]", "assert generate_integers(0, 10) == [0, 2, 4, 6, 8, 10]", "assert generate_integers(8, 2) == [2, 4, 6, 8]", "assert generate_integers(2, 8) == [2, 4, 6, 8]", "assert generate_integers(5, 9) == [6, 8]", "assert generate_integers(10, 14) == []", "assert generate_integers(5, 5) == []", "assert generate_integers(20, 25) == [20, 22, 24]", "assert generate_integers(0, 100) == [0, 2, 4, 6, 8, 20, 22, 24, 26, 28, 40, 42, 44, 46, 48, 60, 62, 64, 66, 68, 80, 82, 84, 86, 88]", "assert generate_integers(8, 2) == [2, 4, 6, 8]", "assert generate_integers(2, 8) == [2, 4, 6, 8]", "assert generate_integers(10, 10) == [10]", "assert generate_integers(1, 1) == []", "assert generate_integers(3, 7) == [4, 6]", "assert generate_integers(10, 14) == []"]
