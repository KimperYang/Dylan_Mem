{"task_id": "HumanEval/50", "completion": "    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    It handles uppercase, lowercase and special characters.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)\n"}
{"task_id": "HumanEval/53", "completion": "    \"\"\"\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    # Using set to hold the unique characters from each string\n    # Set automatically remove duplicates and unordered\n    # Hence, set(s0) == set(s1) will return True if both strings have the same characters (irrespective of order or frequency)\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "completion": "    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    # Check for corner case where n is 0 or 1.\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "    \"\"\"\n    The function correct_bracketing receives a string of \"<\" and \">\".\n    It returns True if every opening bracket has a corresponding closing bracket.\n    If there are unclosed brackets or closing brackets without a corresponding opening bracket, it returns False.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # Initialize a count of open brackets\n    open_brackets = 0\n\n    # Loop through the string\n    for bracket in brackets:\n        # If the bracket is an opening bracket, increment the count\n        if bracket == \"<\":\n            open_brackets += 1\n        # If the bracket is a closing bracket, decrement the count\n        elif bracket == \">\":\n            open_brackets -= 1\n        # If the count goes negative, there's a closing bracket without a corresponding opening bracket\n        if open_brackets < 0:\n            return False\n\n    # If there are any unclosed brackets, the count will be nonzero\n    return open_brackets == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    # Check if list is empty or has one element\n    if len(l) < 2:\n        return True\n\n    # Check if list is monotonically increasing\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n\n    # Check if list is monotonically decreasing\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n\n    return False"}
{"task_id": "HumanEval/58", "completion": "    \"\"\"Return sorted unique common elements for two lists.\n    \n    Args:\n    l1 : list\n        First input list\n    l2 : list\n        Second input list\n\n    Returns:\n    list\n        sorted list of unique common elements of l1 and l2\n\n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    \n    # Convert both lists to sets to remove duplicate elements and find the intersection\n    common_set = set(l1).intersection(set(l2))\n\n    # Convert the set back to list and sort it\n    common_list = sorted(list(common_set))\n    \n    return common_list\n"}
{"task_id": "HumanEval/59", "completion": "\n\n    # We start by initializing the largest_prime variable to -1 as this is a clear indicator that \n    # our function is yet to encounter any prime factors.\n    largest_prime = -1\n\n    # The number of 2s that divide n are counted and removed.\n    while n % 2 == 0:\n        largest_prime = 2\n        # reduce n\n        n //= 2\n\n    # 'n' must be odd at this point so a skip of 2 can be used\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n = n / i\n\n    # This condition is to handle the case when 'n' is a prime number\n    # greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return int(largest_prime)"}
{"task_id": "HumanEval/60", "completion": "    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        # If n is not an integer or it's less than 1, return 0\n        return 0\n    \n    # Gauss's formula is used for the sum of an arithmetic progression\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "    \"\"\" \n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n\n    stack = [] # Use stack to keep track of the brackets\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket) # push \"(\" to stack\n        elif bracket == \")\":\n            if not stack or stack[-1] != \"(\":\n                # if stack is empty or top of stack is not \"(\"\n                # it means there is no corresponding opening bracket for this closing bracket\n                return False\n            else:\n                stack.pop() # pop the opening bracket from the stack\n\n    return len(stack) == 0 # If stack is empty, it means all opening brackets have corresponding closing brackets\n"}
{"task_id": "HumanEval/62", "completion": "\n    # strategy: iterate over list, calculate derivative and gather them in a new list\n    # derivative of a*x^n is n*a*x^(n-1)\n    # exclude the first coefficient (constant term) since its derivative is 0\n    derivative_list = [i*x for i, x in enumerate(xs)][1:]\n    return derivative_list"}
{"task_id": "HumanEval/63", "completion": "\n    # Using dynamic programming to avoid redundant computations\n    # Initialize base cases\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the sequence with base cases\n    fibfib_sequence = [0, 0, 1] + [0]*(n-2)\n    \n    # Compute the rest of the sequence\n    for i in range(3, n+1):\n        fibfib_sequence[i] = fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3]\n        \n    return fibfib_sequence[n]"}
{"task_id": "HumanEval/64", "completion": "    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    \n    # convert the input string to lowercase to handle case insensitivity\n    s = s.lower()\n\n    # set of vowels\n    vowels = set('aeiou')\n\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        # check if 'y' is at the end of the word and count as vowel\n        if s[i] == 'y' and i == len(s)-1:\n            count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/65", "completion": "    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    # Convert the integer to list of digits\n    digits = list(str(x))\n    \n    # Handle case when shift is greater than the number of digits\n    if shift > len(digits):\n        return ''.join(digits[::-1]) # reversed digits\n    \n    # Perform circular shift\n    rotate_digits = digits[-shift:] + digits[:-shift]\n    \n    return ''.join(rotate_digits)\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(i) for i in s if i.isupper())"}
{"task_id": "HumanEval/67", "completion": "    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    \n    fruits_count = [int(i) for i in s.split() if i.isdigit()]\n    return n - sum(fruits_count)\n"}
{"task_id": "HumanEval/68", "completion": "\n\n    # Initialize a variable to store the smallest even number and its index\n    smallest_even_num, smallest_even_index = float('inf'), 0\n\n    # Iterate over the array and check for even numbers\n    for i, num in enumerate(arr):\n        # If the number is even and its value is less than the current smallest even number\n        # Update the smallest even number and its index\n        if num % 2 == 0 and num < smallest_even_num:\n            smallest_even_num, smallest_even_index = num, i\n\n    # If the smallest even number is still infinity, it means no even number was found in the array\n    # So return an empty list\n    if smallest_even_num == float('inf'):\n        return []\n        \n    # Return the smallest even number and its index\n    return [smallest_even_num, smallest_even_index]"}
{"task_id": "HumanEval/69", "completion": "\n    \n    from collections import Counter\n\n    count = Counter(lst)\n    valid_numbers = [num for num in count if num <= count[num]]\n    \n    if valid_numbers:\n        return max(valid_numbers)\n    else:\n        return -1"}
{"task_id": "HumanEval/70", "completion": "\n\n    # Starting with an empty list to store the result\n    result = []\n\n    # Sorting the list in descending order\n    lst.sort(reverse=True)\n\n    # Continue the process until the list is empty\n    while lst:\n\n        # Get the minimum value (which is at the end of the list), remove it from lst and append it to result \n        result.append(lst.pop())\n\n        # If the list is not yet empty, get the maximum value (which is now at the start of the list), remove it from lst and append it to result \n        if lst:\n            result.append(lst.pop(0))\n\n    return result"}
{"task_id": "HumanEval/71", "completion": "\n\n    # Check if the input forms a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate area using Heron's formula and round it to 2 decimal places\n        area = round((s*(s-a)*(s-b)*(s-c)) ** 0.5, 2)\n    else:\n        area = -1\n    return area"}
{"task_id": "HumanEval/72", "completion": "    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    # Check if the list is palindromic (balanced)\n    if q != q[::-1]:\n        return False\n\n    # Check if the sum of elements is less than or equal to the maximum weight\n    if sum(q) > w:\n        return False\n\n    # If passed both checks, return True\n    return True\n"}
{"task_id": "HumanEval/73", "completion": "\n\n    # Initialize count variable to track the number of changes\n    count = 0\n\n    # Use two pointers approach to traverse the array from both ends\n    start = 0\n    end = len(arr) - 1\n\n    # While the start pointer is less than the end pointer\n    while start < end:\n        # If the elements at both ends are not equal, then we need to change one of them to make the array palindromic\n        if arr[start] != arr[end]:\n            count += 1\n        # Move the pointers towards the center of the array\n        start += 1\n        end -= 1\n\n    # Return the total number of changes\n    return count"}
{"task_id": "HumanEval/74", "completion": "\n\n    # Calculate the total number of chars in each list using list comprehension and sum function\n    lst1_chars = sum([len(word) for word in lst1])\n    lst2_chars = sum([len(word) for word in lst2])\n\n    # Return the list that has total number of chars less than the other list\n    # If they have the same number of chars, return the first list\n    return lst1 if lst1_chars <= lst2_chars else lst2"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(100) if is_prime(i)]\n\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "\n    import math\n    \n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return n ** int(math.log(x, n)) == x"}
{"task_id": "HumanEval/77", "completion": "\n    # Importing the math module\n    import math\n\n    # Calculating the cube root of the absolute value of the number\n    cube_root = abs(a) ** (1. / 3.)\n\n    # Rounding off the cube root to the nearest integer\n    cube_root_rounded = round(cube_root)\n\n    # Checking if the cube of the rounded off cube root is equal to the absolute value of the input number\n    if cube_root_rounded ** 3 == abs(a):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/78", "completion": "\n\n    # Prime hexadecimal digits\n    prime_hex_digits = set('2357BD')\n\n    # Count the number of prime hexadecimal digits in the input string \n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    \n    return count"}
{"task_id": "HumanEval/79", "completion": "\n    # check if input is integer\n    if isinstance(decimal, int):\n        # convert integer to binary and remove '0b' at the beginning\n        binary = bin(decimal)[2:]\n        # Add 'db' at the beginning and at the end\n        return 'db' + binary + 'db'\n    else:\n        # if decimal is not integer, raise TypeError\n        raise TypeError(\"Input must be an integer\")"}
{"task_id": "HumanEval/80", "completion": "\n    # First, we check if the length of the string is less than 3.\n    # If it is, the string cannot be happy, so we return False.\n    if len(s) < 3:\n        return False\n\n    # For every group of 3 consecutive letters in the string,\n    # we convert the group into a set and check its length.\n    # If the length is less than 3, it means that there are duplicate letters,\n    # so the string is not happy.\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n\n    # If all groups of 3 consecutive letters are distinct, the string is happy.\n    return True"}
{"task_id": "HumanEval/81", "completion": "\n    # initialize an empty list to store letter grades\n    letter_grades = []\n\n    # loop through each grade in grades\n    for gpa in grades:\n        # assign letter grades based on gpa\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n            \n    # return the list of letter grades\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "\n    # Python function to check whether a number is prime or not\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        max_div = int(n**0.5) + 1\n        for i in range(3, max_div, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if length of string is prime\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "\n    # Check for initial corner case\n    if n <= 0:\n        return 0\n\n    # There are 10^(n-1) numbers of length n. \n    # For the numbers that start with 1, there are 10^(n-1) possibilities.\n    # For the numbers that end with 1, there are again 10^(n-1) possibilities.\n    # Both cases overlap with 1-digit numbers that are 1. So, we subtract those cases.\n    return 2 * 10 ** (n - 1) - (n == 1)"}
{"task_id": "HumanEval/84", "completion": "\n    # Check edge case if N is 0\n    if N == 0:\n        return \"0\"\n    \n    # Initialize sum of binary digits\n    sum_bin = 0\n    \n    # Convert N to binary and iterate over each digit\n    for i in bin(N)[2:]:\n        sum_bin += int(i)\n    \n    # Convert sum_bin to binary and return as string\n    return bin(sum_bin)[2:]"}
{"task_id": "HumanEval/85", "completion": "    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n\n    # split the given string into words\n    words = s.split(' ')\n\n    # rearrange each word in the list of words\n    words = [''.join(sorted(word)) for word in words]\n\n    # join the words back into a sentence with a space in between each word\n    out = ' '.join(words)\n\n    return out"}
{"task_id": "HumanEval/87", "completion": "\n\n    result = []\n\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n\n    result.sort(key=lambda x: (x[0], -x[1]))\n\n    return result"}
{"task_id": "HumanEval/88", "completion": "    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum(first index value, last index value) is odd,\n    or sort it in descending order if the sum(first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Copy the array to avoid changing the original one.\n    array_copy = array.copy()\n\n    # If array is empty or contains only one element, return as it is.\n    if len(array_copy) < 2:\n        return array_copy\n\n    # Get the sum of the first and the last element.\n    sum_extremes = array_copy[0] + array_copy[-1]\n\n    # Sort in ascending order if sum is odd, else sort in descending order.\n    if sum_extremes % 2 == 1:\n        return sorted(array_copy)\n    else:\n        return sorted(array_copy, reverse=True)\n"}
{"task_id": "HumanEval/89", "completion": "\n\n    # We will use the ASCII value of the characters to perform the rotation.\n    # For each character in the string, we will increment its ASCII value by 4 \n    # (which is two multiplied to two places) and then convert the new ASCII value back to a character. \n    # If we exceeded the ASCII value of 'z' or 'Z' (for uppercase letters), \n    # we will subtract 26 from the ASCII value to ensure that we're still within the alphabet.\n\n    result = \"\"\n    for char in s:\n        ascii_val = ord(char)\n        new_ascii_val = ascii_val + 4\n        if (char.islower() and new_ascii_val > ord('z')) or (char.isupper() and new_ascii_val > ord('Z')):\n            new_ascii_val -= 26\n        result += chr(new_ascii_val)\n    return result"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        lst = sorted(set(lst))\n        if len(lst) < 2:\n            return None\n        else:\n            return lst[1]"}
{"task_id": "HumanEval/91", "completion": "\n    import re\n    \n    # Split the sentences\n    sentences = re.split('\\.|\\?|\\!', S)\n    \n    # Count the sentences starting with 'I'\n    boredoms = sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n    \n    return boredoms"}
{"task_id": "HumanEval/92", "completion": "    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if all parameters are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\n    # If none of the conditions above is met, return False\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "    \"\"\"\n    Write a function that takes a message, and encodes it in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # import string package\n    import string\n\n    # define vowels\n    vowels = 'aeiouAEIOU'\n    \n    # define the mapping for vowels to be replaced\n    vowel_map = {v: chr(ord(v)+2) for v in vowels}\n    \n    # use the translate method to replace vowels and swapcase to swap the case\n    message = message.translate(str.maketrans(vowel_map)).swapcase()\n\n    return message\n"}
{"task_id": "HumanEval/94", "completion": "\n\n    def is_prime(n):\n        \"\"\"Check if integer n is a prime\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n%2 == 0 or n%3 == 0:\n            return False\n        i = 5\n        while i*i <= n:\n            if n%i == 0 or n%(i+2) == 0:\n                return False\n            i += 6\n        return True\n\n    primes_list = [i for i in lst if is_prime(i)]\n    if primes_list:\n        largest_prime = max(primes_list)\n        return sum(int(digit) for digit in str(largest_prime))\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "completion": "\n    # Check if dictionary is empty\n    if not dict:\n        return False\n\n    # Initializing lower and upper case flags\n    is_lower, is_upper = True, True\n\n    # Iterate over all keys in the dictionary\n    for key in dict.keys():\n        # Check if key is a string, if not return False\n        if not isinstance(key, str):\n            return False\n        # Check if key is not in lower case, then lower case flag is False\n        if not key.islower():\n            is_lower = False\n        # Check if key is not in upper case, then upper case flag is False\n        if not key.isupper():\n            is_upper = False\n\n    # Return True only if either lower or upper case flag is True\n    return is_lower or is_upper"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        \"\"\"A helper function to check if a number is prime\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Loop through the numbers up to n and check if they are prime\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes"}
{"task_id": "HumanEval/97", "completion": "\n\n    # Extract the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "\n    # list of uppercase vowels\n    vowels = ['A', 'E', 'I', 'O', 'U']\n\n    count = 0\n    for i in range(0, len(s), 2): # step of 2 to check only even indices\n        if s[i] in vowels:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/99", "completion": "\n\n    float_value = float(value)\n    if float_value >= 0:\n        return int(float_value) if float_value - int(float_value) < 0.5 else int(float_value) + 1\n    else:\n        return int(float_value) if int(float_value) - float_value < 0.5 else int(float_value) - 1"}
